---
title: "Summary"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(fig.align = TRUE)

library(tidyverse)  # Load core packages: 
# ggplot2,   for data visualization.
# dplyr,     for data manipulation.
# tidyr,     for data tidying.
# purrr,     for functional programming.
# tibble,    for tibbles, a modern re-imagining of data frames.
# stringr,   for strings.
# forcats,   for factors.
# lubridate, for date/times.
# readr,     for reading .csv, .tsv, and .fwf files.
# readxl,    for reading .xls, and .xlxs files.
# feather,   for sharing with Python and other languages.
# haven,     for SPSS, SAS and Stata files.
# httr,      for web apis.
# jsonlite   for JSON.
# rvest,     for web scraping.
# xml2,      for XML.
# modelr,    for modelling within a pipeline
# broom,     for turning models into tidy data
# hms,       for times.

library(magrittr)   # Pipeline operator
library(lobstr)     # Visualizing abstract syntax trees, stack trees, and object sizes
library(pander)     # Exporting/converting complex pandoc documents, EX: df to Pandoc table
library(ggforce)    # More plot functions on top of ggplot2
library(ggpubr)     # Automatically add p-values and significance levels  plots. 
# Arrange and annotate multiple plots on the same page. 
# Change graphical parameters such as colors and labels.
library(sf)         # Geo-spatial vector manipulation: points, lines, polygons
library(kableExtra) # Generate 90 % of complex/advanced/self-customized/beautiful tables
library(cowplot)    # Multiple plots arrangement
library(gridExtra)  # Multiple plots arrangement
library(animation)  # Animated figure container
library(latex2exp)  # Latex axis titles in ggplot2
library(ellipse)    # Simultaneous confidence interval region to check C.I. of 2 slope parameters
library(plotly)     # User interactive plots
library(ellipse)    # Simultaneous confidence interval region to check C.I. of 2 regressors
library(olsrr)      # Model selections 
library(leaps)      # Regression subsetting 
library(pls)        # Partial Least squares
library(MASS)       # LDA, QDA, OLS, Ridge Regression, Box-Cox, stepAIC, etc,.
library(e1071)      # Naive Bayesian Classfier,SVM, GKNN, ICA, LCA
library(class)      # KNN, SOM, LVQ
library(ROCR)       # Precision/Recall/Sensitivity/Specificity performance plot 
library(boot)       # LOOCV, Bootstrap,
library(caret)      # Classification/Regression Training, run ?caret::trainControl
library(corrgram)   # for correlation matrix
library(corrplot)   # for graphical display of correlation matrix

set.seed(1234)        # make random results reproducible

current_dir <- getwd()

if (!is.null(current_dir)) {
  setwd(current_dir)
  remove(current_dir)
}
```


## Data Modeling

```{r, echo=FALSE}
load("dataset\\plot\\knn.kfoldCV.plot.Rdata")
load("dataset\\plot\\logit.kfoldCV_MASS.plot.Rdata")
load("dataset\\plot\\lda.kfoldCV_MASS.plot.Rdata")
load("dataset\\plot\\qda.kfoldCV_MASS.plot.Rdata")

load("dataset\\plot\\knn.kfoldCV.ROC.plot.Rdata")
load("dataset\\plot\\logit.kfoldCV_MASS.ROC.plot.Rdata")
load("dataset\\plot\\lda.kfoldCV_MASS.ROC.plot.Rdata")
load("dataset\\plot\\qda.kfoldCV_MASS.ROC.plot.Rdata")
```

```{r fig.width=20, fig.height=15, echo=FALSE}
ggarrange(knn.kfoldCV.plot, 
          logit.kfoldCV_MASS.plot,
          lda.kfoldCV_MASS.plot,
          qda.kfoldCV_MASS.plot,
          ncol = 2, nrow = 2)
```

```{r fig.width=15, fig.height=15, echo=FALSE}
cowplot::plot_grid(knn.kfoldCV.ROC.plot,
                   logit.kfoldCV_MASS.ROC.plot,
                   lda.kfoldCV_MASS.ROC.plot,
                   qda.kfoldCV_MASS.ROC.plot, 
                   ncol = 2, align = "hv", scale = 0.8)
```

| Resampling Method                                | Error Rate | Sensitivity | Specificity | AUC       |
| ------------------------------------------------ | ---------- | ----------- | ----------- | --------- |
| KNN 10-Fold CV, k=1:10                           | 0.1785     | 0.9553      | 0.2555      | 0.6053808 |
| KNN 10-Fold CV, k=1:30                           | 0.1987     | 0.9719      | 0.0793      | 0.5255997 |
| KNN Hold-out CV, k=1:10                          | 0.1726     | 0.9584      | 0.2731      | 0.6157522 |
| KNN Hold-out CV, k=1:30                          | 0.1944     | 0.9875      | 0.0352      | 0.5113776 |
| KNN LOOCV                                        | 0.1692     | 0.9605      | 0.2819      | 0.6211981 |
| KNN LOOCV (Tuned)                                | 0.1970     | 0.9729      | 0.0837      | 0.5283226 |
| Repeated CV                                      | 0.1069     | 0.9542      | 0.6344      | 0.7942878 |
| Repeated CV (Tuned)                              | 0.1204     | 0.9584      | 0.5463      | 0.7523161 |
|                                                  |            |             |             |           |
| Logistic Regression (`caret` 10-fold CV)         | 0.1902     | 0.9336      | 0.3180      | 0.6258030 |
| Logistic Regression (`caret` tuned with stepAIC) | 0.1919     | 0.9895      | 0.0879      | 0.5386644 |
| Logistic Regression (`MASS` 10-fold CV)          | 0.1616     | 1.0000      | 0.0857      | 0.5438871 |
| Logistic Regression (`MASS` Hold-out CV)         | 0.1894     | 0.9884      | 0.1046      | 0.5465057 |
|                                                  |            |             |             |           |
| LDA (`caret` 10-fold CV)                         | 0.1919     | 0.9283      | 0.3305      | 0.6294448 |
| LDA (`MASS` 10-fold CV)                          | 0.1591     | 0.9969      | 0.1143      | 0.5488133 |
|                                                  |            |             |             |           |
| QDA (`caret` 10-fold CV)                         | 0.2399     | 0.7743      | 0.7013      | 0.7377967 |
| QDA (`MASS` 10-fold CV)                          | 0.1692     | 0.8934      | 0.5714      | 0.7324227 |

## Further Modeling

```{r, echo=FALSE}
load("dataset\\plot\\nb.kfoldCV.ROC.plot.Rdata")
load("dataset\\plot\\dc.kfoldCV.ROC.plot.Rdata")
load("dataset\\plot\\dc.kfoldCV_mod.ROC.plot.Rdata")
load("dataset\\plot\\rf.kfoldCV.ROC.plot.Rdata")
load("dataset\\plot\\bag.kfoldCV.ROC.plot.Rdata")
load("dataset\\plot\\boost.kfoldCV.ROC.plot.Rdata")
load("dataset\\plot\\xgboost.kfoldCV.ROC.plot.Rdata")
load("dataset\\plot\\svm.kfoldCV.ROC.plot.Rdata")
load("dataset\\plot\\nnet.kfoldCV.ROC.plot.Rdata")
```

```{r, fig.width=20, fig.height=10, echo=FALSE}
cowplot::plot_grid(nb.kfoldCV.ROC.plot,
                   dc.kfoldCV.ROC.plot,
                   ncol = 2, align = "hv", scale = 0.8)

cowplot::plot_grid(rf.kfoldCV.ROC.plot,
                   bag.kfoldCV.ROC.plot, 
                   ncol = 2, align = "hv", scale = 0.8)

cowplot::plot_grid(boost.kfoldCV.ROC.plot,
                   svm.kfoldCV.ROC.plot,
                   ncol = 2, align = "hv", scale = 0.8)

cowplot::plot_grid(xgboost.kfoldCV.ROC.plot,
                   nnet.kfoldCV.ROC.plot,
                   ncol = 2, align = "hv", scale = 0.8)
```

| Resampling Method | Error Rate | Sensitivity | Specificity | AUC       |
| ----------------- | ---------- | ----------- | ----------- | --------- |
| Naive Bayes       | 0.2391     | 0.7804      | 0.6784      | 0.7294256 |
| CART              | 0.1810     | 0.9032      | 0.4626      | 0.6828904 |
| Random Forest     | 0.1540     | 0.9501      | 0.4053      | 0.6776692 |
| Bagging           | 0.1658     | 0.9178      | 0.4802      | 0.6989851 |
| Boosting          | 0.1751     | 0.9251      | 0.4009      | 0.6629796 |
| XGBoost           | 0.1633     | 0.9428      | 0.3877      | 0.6652166 |
| SVM               | 0.1675     | 0.9646      | 0.2731      | 0.6188740 |
| Neural Network    | 0.1801     | 0.9313      | 0.3480      | 0.6396696 |