---
title: "Decision Tree"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(fig.align = TRUE)

library(tidyverse)  # Load core packages: 
# ggplot2,   for data visualization.
# dplyr,     for data manipulation.
# tidyr,     for data tidying.
# purrr,     for functional programming.
# tibble,    for tibbles, a modern re-imagining of data frames.
# stringr,   for strings.
# forcats,   for factors.
# lubridate, for date/times.
# readr,     for reading .csv, .tsv, and .fwf files.
# readxl,    for reading .xls, and .xlxs files.
# feather,   for sharing with Python and other languages.
# haven,     for SPSS, SAS and Stata files.
# httr,      for web apis.
# jsonlite   for JSON.
# rvest,     for web scraping.
# xml2,      for XML.
# modelr,    for modelling within a pipeline
# broom,     for turning models into tidy data
# hms,       for times.

library(magrittr)   # Pipeline operator
library(lobstr)     # Visualizing abstract syntax trees, stack trees, and object sizes
library(pander)     # Exporting/converting complex pandoc documents, EX: df to Pandoc table
library(ggforce)    # More plot functions on top of ggplot2
library(ggpubr)     # Automatically add p-values and significance levels  plots. 
# Arrange and annotate multiple plots on the same page. 
# Change graphical parameters such as colors and labels.
library(sf)         # Geo-spatial vector manipulation: points, lines, polygons
library(kableExtra) # Generate 90 % of complex/advanced/self-customized/beautiful tables
library(cowplot)    # Multiple plots arrangement
library(gridExtra)  # Multiple plots arrangement
library(animation)  # Animated figure container
library(latex2exp)  # Latex axis titles in ggplot2
library(ellipse)    # Simultaneous confidence interval region to check C.I. of 2 slope parameters
library(plotly)     # User interactive plots
library(ellipse)    # Simultaneous confidence interval region to check C.I. of 2 regressors
library(olsrr)      # Model selections 
library(leaps)      # Regression subsetting 
library(pls)        # Partial Least squares
library(MASS)       # LDA, QDA, OLS, Ridge Regression, Box-Cox, stepAIC, etc,.
library(e1071)      # Naive Bayesian Classfier,SVM, GKNN, ICA, LCA
library(class)      # KNN, SOM, LVQ
library(ROCR)       # Precision/Recall/Sensitivity/Specificity performance plot 
library(boot)       # LOOCV, Bootstrap,
library(caret)      # Classification/Regression Training, run ?caret::trainControl
library(corrgram)   # for correlation matrix
library(corrplot)   # for graphical display of correlation matrix

set.seed(1234)        # make random results reproducible

current_dir <- getwd()

if (!is.null(current_dir)) {
  setwd(current_dir)
  remove(current_dir)
}
```

The CART (Classification and Regression Trees) algorithm is a decision tree method. CART is a popular algorithm used for both classification and regression problems. For our classification task, it constructs a binary tree in which each internal node represents a test on a single feature, and each leaf node represents a class label or a numeric value. The splitting of nodes in the tree is based on a measure of impurity such as Gini impurity or entropy. The CART algorithm is often used in applications such as finance, marketing, and healthcare.


## Model Construction
```{r nb.model_savings, eval=FALSE}
#----------------------#
#----Decision Tree-----#
#----------------------#
set.seed(1234)
train_control <- trainControl(method = "cv", number = 10)

set.seed(1234)
dc_model <- train(good ~ ., 
               data = train, 
               method = "rpart2", 
               trControl = train_control,
               na.action = na.omit)

save(dc_model, file = "dataset\\model\\dc.model_kfoldCV.Rdata")


#----------------------------#
#----Decision Tree (Mod)-----#
#----------------------------#
set.seed(1234)
train_control <- trainControl(method = "cv", number = 10)

set.seed(1234)
dc_model <- train(good ~ ., 
               data = train, 
               method = "rpart", 
               trControl = train_control,
               tuneLength = 5,
               tuneGrid = data.frame(cp = seq(0.001, 0.1, by = 0.001)))

save(dc_model, file = "dataset\\model\\dc.model_kfoldCV_mod.Rdata")
```

## K-fold CV
```{r dc.kfoldCV, fig.show='hide'}
# Data Import
load("dataset\\wine.data.Rdata")
load("dataset\\train.Rdata")
load("dataset\\test.Rdata")

# Model Import
load("dataset\\model\\dc.model_kfoldCV.Rdata")

dc.predictions <- predict(dc_model, newdata = test)

confusionMatrix(dc.predictions, test$good)


dc.predictions <- as.numeric(dc.predictions)
pred_obj <- prediction(dc.predictions, test$good)
auc_val <- performance(pred_obj, "auc")@y.values[[1]]
auc_val

roc_obj <- performance(pred_obj, "tpr", "fpr")
plot(roc_obj, colorize = TRUE, lwd = 2,
     xlab = "False Positive Rate", 
     ylab = "True Positive Rate",
     main = "ROC Curves from Repeated CV")
points(auc_val, 1 - auc_val, 
       col = "steelblue", 
       pch = 21)
abline(a = 0, b = 1)
dc.kfoldCV.ROC.plot <- recordPlot()
```

### Tuned
```{r, dc.kfoldCV_mod, fig.show='hide'}
# Model Import
load("dataset\\model\\dc.model_kfoldCV_mod.Rdata")

dc.predictions <- predict(dc_model, newdata = test)

confusionMatrix(dc.predictions, test$good)


dc.predictions <- as.numeric(dc.predictions)
pred_obj <- prediction(dc.predictions, test$good)
auc_val <- performance(pred_obj, "auc")@y.values[[1]]
auc_val

roc_obj <- performance(pred_obj, "tpr", "fpr")
plot(roc_obj, colorize = TRUE, lwd = 2,
     xlab = "False Positive Rate", 
     ylab = "True Positive Rate",
     main = "ROC Curves from Repeated CV")
points(auc_val, 1 - auc_val, 
       col = "steelblue", 
       pch = 21)
abline(a = 0, b = 1)
dc.kfoldCV_mod.ROC.plot <- recordPlot()
```

| Resampling Method    | Error Rate | Sensitivity | Specificity | AUC       |
| -------------------- | ---------- | ----------- | ----------- | --------- |
| CART                 | 0.181      | 0.9032      | 0.4626      | 0.6828904 |
| CART (Tuned)         | 0.1751     | 0.9251      | 0.4009      | 0.6629796 |

```{r, echo=FALSE}
save(dc.kfoldCV.ROC.plot, file = "dataset\\plot\\dc.kfoldCV.ROC.plot.Rdata")
save(dc.kfoldCV.ROC.plot, file = "dataset\\plot\\dc.kfoldCV.ROC.plot.Rdata")
save(dc.kfoldCV.ROC.plot, file = "dataset\\plot\\dc.kfoldCV_mod.ROC.plot.Rdata")
```