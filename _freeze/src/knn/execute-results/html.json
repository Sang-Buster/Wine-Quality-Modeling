{
  "hash": "63c85f2c349f6659a5403cd057589340",
  "result": {
    "markdown": "---\ntitle: \"K Nearest Neighbor Classifier\"\n---\n\n\n\n\n\n## Model Construction\n\n::: {.cell}\n\n```{.r .cell-code}\n#--------------------#\n#-----K-fold CV------#\n#--------------------#\n\nset.seed(1234)\n# Define the training control object for 10-fold cross-validation\ntrain_control <- trainControl(method = \"cv\", number = 10)\n\n# Train the KNN model using 10-fold cross-validation\n# tuneLength argument to specify the range of values of K to be considered for tuning\nset.seed(1234)\nknn_model <- train(good ~ ., \n                   data = train, \n                   method = \"knn\", \n                   trControl = train_control)\n\n# Save the model into .Rdata for future import \nsave(knn_model, file = \"dataset\\\\knn.model_kfoldCV.Rdata\")\n\n\n#--------------------------#\n#-----K-fold CV (Mod)------#\n#--------------------------#\n\nset.seed(1234)\ntrain_control <- trainControl(method = \"cv\", number = 10)\n\nset.seed(1234)\nknn_model <- train(good ~ ., \n                   data = train, \n                   method = \"knn\", \n                   trControl = train_control, \n                   tuneLength = 10)\n\n# Save the model into .Rdata for future import \nsave(knn_model, file = \"dataset\\\\knn.model_kfoldCV_mod.Rdata\")\n\n\n#--------------------#\n#----Hold-out CV-----#\n#--------------------#\n\nset.seed(1234)\ntrain_control <- trainControl(method = \"none\",)\n\nset.seed(1234)\nknn_model <- train(good ~ ., \n                   data = train, \n                   method = \"knn\")\n\nsave(knn_model, file = \"dataset\\\\knn.model_holdoutCV.Rdata\")\n\n\n#--------------------------#\n#----Hold-out CV (Mod)-----#\n#--------------------------#\n\nset.seed(1234)\ntrain_control <- trainControl(method = \"none\",)\n\nset.seed(1234)\nknn_model <- train(good ~ ., \n                   data = train, \n                   method = \"knn\",\n                   tuneGrid = expand.grid(k=1:30))\n\nsave(knn_model, file = \"dataset\\\\knn.model_holdoutCV_mod.Rdata\")\n\n\n#--------------------#\n#-------LOOCV--------#\n#--------------------#\n\nset.seed(1234)\ntrain_control <- trainControl(method = \"LOOCV\")\n\nset.seed(1234)\nknn_model <- train(good ~ ., \n                   data = train, \n                   method = \"knn\", \n                   trControl = train_control)\n\nsave(knn_model, file = \"dataset\\\\knn.model_looCV.Rdata\")\n\n\n#--------------------------#\n#-------LOOCV (Mod)--------#\n#--------------------------#\n\nset.seed(1234)\ntrain_control <- trainControl(method = \"LOOCV\")\n\nset.seed(1234)\nknn_model <- train(good ~ ., \n                   data = train, \n                   method = \"knn\", \n                   trControl = train_control,\n                   tuneLength = 10,\n                   tuneGrid = expand.grid(k = 1:20))\n\nsave(knn_model, file = \"dataset\\\\knn.model_looCV_mod.Rdata\")\n\n\n#--------------------#\n#----Repeated CV-----#\n#--------------------#\n\nset.seed(1234)\ntrain_control <- trainControl(method = \"repeatedcv\", number = 10, repeats = 5)\n\nset.seed(1234)\nknn_model <- train(good ~ ., \n                   data = train, \n                   method = \"knn\", \n                   trControl = train_control)\n\nsave(knn_model, file = \"dataset\\\\knn.model_repeatedCV.Rdata\")\n\n\n#--------------------------#\n#----Repeated CV (Mod)-----#\n#--------------------------#\n\nset.seed(1234)\ntrain_control <- trainControl(method = \"repeatedcv\", number = 10, repeats = 5)\n\nkknn.grid <- expand.grid(kmax = c(3, 5, 7 ,9, 11), distance = c(1, 2, 3),\n                         kernel = c(\"rectangular\", \"gaussian\", \"cos\"))\n\nset.seed(1234)\nknn_model <- train(good ~ ., \n                   data = train, \n                   method = \"kknn\",\n                   trControl = train_control, \n                   tuneGrid = kknn.grid,\n                   preProcess = c(\"center\", \"scale\"))\n\nsave(knn_model, file = \"dataset\\\\knn.model_repeatedCV_mod.Rdata\")\n```\n:::\n\n\n\n## K-fold CV \n\n::: {.cell}\n\n```{.r .cell-code}\n# Data Import\nload(\"dataset\\\\wine.data.Rdata\")\nload(\"dataset\\\\train.Rdata\")\nload(\"dataset\\\\test.Rdata\")\n\n# Model Import\nload(\"dataset\\\\model\\\\knn.model_kfoldCV.Rdata\")\n\n# Make predictions on the test data using the trained model and calculate the test error rate\nknn.predictions <- predict(knn_model, newdata = test)\n\nconfusionMatrix(knn.predictions, test$good)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction   0   1\n         0 873 194\n         1  76  45\n                                          \n               Accuracy : 0.7727          \n                 95% CI : (0.7478, 0.7963)\n    No Information Rate : 0.7988          \n    P-Value [Acc > NIR] : 0.9878          \n                                          \n                  Kappa : 0.1327          \n                                          \n Mcnemar's Test P-Value : 1.076e-12       \n                                          \n            Sensitivity : 0.9199          \n            Specificity : 0.1883          \n         Pos Pred Value : 0.8182          \n         Neg Pred Value : 0.3719          \n             Prevalence : 0.7988          \n         Detection Rate : 0.7348          \n   Detection Prevalence : 0.8981          \n      Balanced Accuracy : 0.5541          \n                                          \n       'Positive' Class : 0               \n                                          \n```\n:::\n\n```{.r .cell-code}\n# Convert predictions to a numeric vector\nknn.predictions <- as.numeric(knn.predictions)\n\n# Calculate the AUC using the performance() and auc() functions:\npred_obj <- prediction(knn.predictions, test$good)\nauc_val <- performance(pred_obj, \"auc\")@y.values[[1]]\nauc_val\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.5541001\n```\n:::\n\n```{.r .cell-code}\n# Performance plot for TP and FP\nroc_obj <- performance(pred_obj, \"tpr\", \"fpr\")\nplot(roc_obj, colorize = TRUE, lwd = 2,\n     xlab = \"False Positive Rate\", \n     ylab = \"True Positive Rate\",\n     main = \"ROC Curves from K-fold CV\")\npoints(auc_val, 1 - auc_val, \n       col = \"steelblue\", \n       pch = 21)\nabline(a = 0, b = 1)\n```\n\n```{.r .cell-code}\nknn.kfoldCV.ROC.plot<- recordPlot()\n\n# Accuracy and Kappa value plot\nknn.accu.kappa.plot <- function(knn.model) {\n  p <- ggplot(data=data.frame(k = knn.model$results$k,\n                              Accuracy = knn.model$results$Accuracy,\n                              Kappa = knn.model$results$Kappa)) +\n    geom_point(aes(x = k, y = Accuracy, color = \"Accuracy\")) +\n    geom_point(aes(x = k, y = Kappa, color = \"Kappa\")) +\n    geom_line(aes(x = k, y = Accuracy, linetype = \"Accuracy\", color = \"Accuracy\")) +\n    geom_line(aes(x = k, y = Kappa, linetype = \"Kappa\", color = \"Kappa\")) +\n    scale_color_manual(values = c(\"#98c379\", \"#e06c75\"),\n                       guide = guide_legend(override.aes = list(linetype = c(1, 0)) )) +\n    scale_linetype_manual(values=c(\"solid\", \"dotted\"),\n                          guide = guide_legend(override.aes = list(color = c(\"#98c379\", \"#e06c75\")))) +\n    labs(x = \"K value\", \n         y = \"Accuracy / Kappa\") +\n    ylim(0, 1) +\n    theme_bw() +\n    theme(plot.title = element_text(hjust = 0.5)) +\n    guides(color = guide_legend(title = \"Metric\"),\n           linetype = guide_legend(title = \"Metric\"))\n  return(p)\n}\n\nknn.kfoldCV.plot <- knn.accu.kappa.plot(knn_model) + \n  geom_text(aes(x = k, y = Accuracy, label = round(Accuracy, 3)), vjust = -1) +\n  geom_text(aes(x = k, y = Kappa, label = round(Kappa, 3)), vjust = -1) +\n  ggtitle(\"KNN Model Performance (10-Fold CV)\")\n```\n:::\n\n\n### Tuned\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"dataset\\\\model\\\\knn.model_kfoldCV_mod.Rdata\")\n\nknn.predictions <- predict(knn_model, newdata = test)\n\nconfusionMatrix(knn.predictions, test$good)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction   0   1\n         0 927 215\n         1  22  24\n                                          \n               Accuracy : 0.8005          \n                 95% CI : (0.7766, 0.8229)\n    No Information Rate : 0.7988          \n    P-Value [Acc > NIR] : 0.4596          \n                                          \n                  Kappa : 0.1107          \n                                          \n Mcnemar's Test P-Value : <2e-16          \n                                          \n            Sensitivity : 0.9768          \n            Specificity : 0.1004          \n         Pos Pred Value : 0.8117          \n         Neg Pred Value : 0.5217          \n             Prevalence : 0.7988          \n         Detection Rate : 0.7803          \n   Detection Prevalence : 0.9613          \n      Balanced Accuracy : 0.5386          \n                                          \n       'Positive' Class : 0               \n                                          \n```\n:::\n\n```{.r .cell-code}\nknn.predictions <- as.numeric(knn.predictions)\npred_obj <- prediction(knn.predictions, test$good)\nauc_val <- performance(pred_obj, \"auc\")@y.values[[1]]\nauc_val\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.5386181\n```\n:::\n\n```{.r .cell-code}\nroc_obj <- performance(pred_obj, \"tpr\", \"fpr\")\ninvisible(plot(roc_obj, colorize = TRUE, lwd = 2,\n               xlab = \"False Positive Rate\", \n               ylab = \"True Positive Rate\",\n               main = \"ROC Curves from Tuned K-fold CV\"))\npoints(auc_val, 1 - auc_val, \n       col = \"steelblue\", \n       pch = 21)\nabline(a = 0, b = 1)\n```\n\n```{.r .cell-code}\nknn.kfoldCV_mod.ROC.plot <- recordPlot()\n\nknn.kfoldCV_mod.plot <- knn.accu.kappa.plot(knn_model) +\n  geom_text(aes(x = k, y = Accuracy, label = round(Accuracy, 3)), vjust = -1) +\n  geom_text(aes(x = k, y = Kappa, label = round(Kappa, 3)), vjust = -1) +\n  ggtitle(\"KNN Model Performance (Tuned 10-Fold CV)\")\n```\n:::\n\n\n\n## Hold-out CV (Validation Set Approach)\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"dataset\\\\model\\\\knn.model_holdoutCV.Rdata\")\n\nknn.predictions <- predict(knn_model, newdata = test)\n\nconfusionMatrix(knn.predictions, test$good)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction   0   1\n         0 886 201\n         1  63  38\n                                         \n               Accuracy : 0.7778         \n                 95% CI : (0.753, 0.8011)\n    No Information Rate : 0.7988         \n    P-Value [Acc > NIR] : 0.9663         \n                                         \n                  Kappa : 0.1181         \n                                         \n Mcnemar's Test P-Value : <2e-16         \n                                         \n            Sensitivity : 0.9336         \n            Specificity : 0.1590         \n         Pos Pred Value : 0.8151         \n         Neg Pred Value : 0.3762         \n             Prevalence : 0.7988         \n         Detection Rate : 0.7458         \n   Detection Prevalence : 0.9150         \n      Balanced Accuracy : 0.5463         \n                                         \n       'Positive' Class : 0              \n                                         \n```\n:::\n\n```{.r .cell-code}\nknn.predictions <- as.numeric(knn.predictions)\npred_obj <- prediction(knn.predictions, test$good)\nauc_val <- performance(pred_obj, \"auc\")@y.values[[1]]\nauc_val\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.5463051\n```\n:::\n\n```{.r .cell-code}\nroc_obj <- performance(pred_obj, \"tpr\", \"fpr\")\nplot(roc_obj, colorize = TRUE, lwd = 2,\n     xlab = \"False Positive Rate\", \n     ylab = \"True Positive Rate\",\n     main = \"ROC Curves from Hold-out CV\")\npoints(auc_val, 1 - auc_val, \n       col = \"steelblue\", \n       pch = 21)\nabline(a = 0, b = 1)\n```\n\n```{.r .cell-code}\nknn.holdoutCV.ROC.plot <- recordPlot()\n\nknn.holdoutCV.plot <- knn.accu.kappa.plot(knn_model) +\n  geom_text(aes(x = k, y = Accuracy, label = round(Accuracy, 3)), vjust = -1) +\n  geom_text(aes(x = k, y = Kappa, label = round(Kappa, 3)), vjust = -1) +\n  ggtitle(\"KNN Model Performance (Hold-out CV)\")\n```\n:::\n\n\n### Tuned\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"dataset\\\\model\\\\knn.model_holdoutCV_mod.Rdata\")\n\nknn.predictions <- predict(knn_model, newdata = test)\n\nconfusionMatrix(knn.predictions, test$good)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction   0   1\n         0 943 228\n         1   6  11\n                                          \n               Accuracy : 0.803           \n                 95% CI : (0.7793, 0.8253)\n    No Information Rate : 0.7988          \n    P-Value [Acc > NIR] : 0.3748          \n                                          \n                  Kappa : 0.0608          \n                                          \n Mcnemar's Test P-Value : <2e-16          \n                                          \n            Sensitivity : 0.99368         \n            Specificity : 0.04603         \n         Pos Pred Value : 0.80529         \n         Neg Pred Value : 0.64706         \n             Prevalence : 0.79882         \n         Detection Rate : 0.79377         \n   Detection Prevalence : 0.98569         \n      Balanced Accuracy : 0.51985         \n                                          \n       'Positive' Class : 0               \n                                          \n```\n:::\n\n```{.r .cell-code}\nknn.predictions <- as.numeric(knn.predictions)\npred_obj <- prediction(knn.predictions, test$good)\nauc_val <- performance(pred_obj, \"auc\")@y.values[[1]]\nauc_val\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.5198513\n```\n:::\n\n```{.r .cell-code}\nroc_obj <- performance(pred_obj, \"tpr\", \"fpr\")\nplot(roc_obj, colorize = TRUE, lwd = 2,\n     xlab = \"False Positive Rate\", \n     ylab = \"True Positive Rate\",\n     main = \"ROC Curves from Tuned Hold-out CV\")\npoints(auc_val, 1 - auc_val, \n       col = \"steelblue\", \n       pch = 21)\nabline(a = 0, b = 1)\n```\n\n```{.r .cell-code}\nknn.holdoutCV_mod.ROC.plot <- recordPlot()\n\nknn.holdoutCV_mod.plot <- knn.accu.kappa.plot(knn_model) + \n  geom_text(aes(x = k, y = Accuracy, label = round(Accuracy, 3)), hjust = -0.3, angle=90) +\n  geom_text(aes(x = k, y = Kappa, label = round(Kappa, 3)), hjust=-0.3, angle=90) +\n  ggtitle(\"KNN Model Performance (Tuned Hold-out CV)\")\n```\n:::\n\n\n\n## LOOCV\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"dataset\\\\model\\\\knn.model_looCV.Rdata\")\n\nknn.predictions <- predict(knn_model, newdata = test)\nconfusionMatrix(knn.predictions, test$good)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction   0   1\n         0 915 170\n         1  34  69\n                                          \n               Accuracy : 0.8283          \n                 95% CI : (0.8056, 0.8493)\n    No Information Rate : 0.7988          \n    P-Value [Acc > NIR] : 0.00558         \n                                          \n                  Kappa : 0.3213          \n                                          \n Mcnemar's Test P-Value : < 2e-16         \n                                          \n            Sensitivity : 0.9642          \n            Specificity : 0.2887          \n         Pos Pred Value : 0.8433          \n         Neg Pred Value : 0.6699          \n             Prevalence : 0.7988          \n         Detection Rate : 0.7702          \n   Detection Prevalence : 0.9133          \n      Balanced Accuracy : 0.6264          \n                                          \n       'Positive' Class : 0               \n                                          \n```\n:::\n\n```{.r .cell-code}\nknn.predictions <- as.numeric(knn.predictions)\npred_obj <- prediction(knn.predictions, test$good)\nauc_val <- performance(pred_obj, \"auc\")@y.values[[1]]\nauc_val\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.6264379\n```\n:::\n\n```{.r .cell-code}\nroc_obj <- performance(pred_obj, \"tpr\", \"fpr\")\nplot(roc_obj, colorize = TRUE, lwd = 2,\n     xlab = \"False Positive Rate\", \n     ylab = \"True Positive Rate\",\n     main = 'ROC Curves from LOOCV')\npoints(auc_val, 1 - auc_val, \n       col = \"steelblue\", \n       pch = 21)\nabline(a = 0, b = 1)\n```\n\n```{.r .cell-code}\nknn.looCV.ROC.plot <- recordPlot()\n\nknn.looCV.plot <- knn.accu.kappa.plot(knn_model) + \n  geom_text(aes(x = k, y = Accuracy, label = round(Accuracy, 3)), vjust = -1) +\n  geom_text(aes(x = k, y = Kappa, label = round(Kappa, 3)), vjust = -1) +\n  ggtitle(\"KNN Model Performance (LOOCV)\")\n```\n:::\n\n\n### Tuned\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"dataset\\\\model\\\\knn.model_looCV_mod.Rdata\")\n\nknn.predictions <- predict(knn_model, newdata = test)\nconfusionMatrix(knn.predictions, test$good)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction   0   1\n         0 927 215\n         1  22  24\n                                          \n               Accuracy : 0.8005          \n                 95% CI : (0.7766, 0.8229)\n    No Information Rate : 0.7988          \n    P-Value [Acc > NIR] : 0.4596          \n                                          \n                  Kappa : 0.1107          \n                                          \n Mcnemar's Test P-Value : <2e-16          \n                                          \n            Sensitivity : 0.9768          \n            Specificity : 0.1004          \n         Pos Pred Value : 0.8117          \n         Neg Pred Value : 0.5217          \n             Prevalence : 0.7988          \n         Detection Rate : 0.7803          \n   Detection Prevalence : 0.9613          \n      Balanced Accuracy : 0.5386          \n                                          \n       'Positive' Class : 0               \n                                          \n```\n:::\n\n```{.r .cell-code}\nknn.predictions <- as.numeric(knn.predictions)\npred_obj <- prediction(knn.predictions, test$good)\nauc_val <- performance(pred_obj, \"auc\")@y.values[[1]]\nauc_val\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.5386181\n```\n:::\n\n```{.r .cell-code}\nroc_obj <- performance(pred_obj, \"tpr\", \"fpr\")\nplot(roc_obj, colorize = TRUE, lwd = 2,\n     xlab = \"False Positive Rate\", \n     ylab = \"True Positive Rate\",\n     main = \"ROC Curves from Tuned LOOCV\")\npoints(auc_val, 1 - auc_val, \n       col = \"steelblue\", \n       pch = 21)\nabline(a = 0, b = 1)\n```\n\n```{.r .cell-code}\nknn.looCV_mod.ROC.plot <- recordPlot()\n\nknn.looCV_mod.plot <- knn.accu.kappa.plot(knn_model) + \n  geom_text(aes(x = k, y = Accuracy, label = round(Accuracy, 3)), hjust = -0.3, angle=90) +\n  geom_text(aes(x = k, y = Kappa, label = round(Kappa, 3)), hjust = -0.3, angle=90) +\n  ggtitle(\"KNN Model Performance (Tuned LOOCV)\")\n```\n:::\n\n\n\n## Repeated CV\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"dataset\\\\model\\\\knn.model_repeatedCV.Rdata\")\n\nknn.predictions <- predict(knn_model, newdata = test)\n\nconfusionMatrix(knn.predictions, test$good)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction   0   1\n         0 864 126\n         1  85 113\n                                          \n               Accuracy : 0.8224          \n                 95% CI : (0.7994, 0.8437)\n    No Information Rate : 0.7988          \n    P-Value [Acc > NIR] : 0.022056        \n                                          \n                  Kappa : 0.4095          \n                                          \n Mcnemar's Test P-Value : 0.005892        \n                                          \n            Sensitivity : 0.9104          \n            Specificity : 0.4728          \n         Pos Pred Value : 0.8727          \n         Neg Pred Value : 0.5707          \n             Prevalence : 0.7988          \n         Detection Rate : 0.7273          \n   Detection Prevalence : 0.8333          \n      Balanced Accuracy : 0.6916          \n                                          \n       'Positive' Class : 0               \n                                          \n```\n:::\n\n```{.r .cell-code}\nknn.predictions <- as.numeric(knn.predictions)\npred_obj <- prediction(knn.predictions, test$good)\nauc_val <- performance(pred_obj, \"auc\")@y.values[[1]]\nauc_val\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.6916177\n```\n:::\n\n```{.r .cell-code}\nroc_obj <- performance(pred_obj, \"tpr\", \"fpr\")\nplot(roc_obj, colorize = TRUE, lwd = 2,\n     xlab = \"False Positive Rate\", \n     ylab = \"True Positive Rate\",\n     main = \"ROC Curves from Repeated CV\")\npoints(auc_val, 1 - auc_val, \n       col = \"steelblue\", \n       pch = 21)\nabline(a = 0, b = 1)\n```\n\n```{.r .cell-code}\nknn.repeatedCV.ROC.plot <- recordPlot()\n\ndf <- knn_model$results\nknn.repeatedCV.plot <- ggplot(data=df, aes(x = kmax, y = Accuracy)) +\n  geom_point(aes(color = \"Accuracy\")) +\n  geom_point(aes(color = \"Kappa\")) +\n  geom_line(aes(linetype = \"Accuracy\", color = \"Accuracy\")) +\n  geom_line(aes(y = Kappa, linetype = \"Kappa\", color = \"Kappa\")) +\n  geom_text(aes(label = round(Accuracy, 3)), vjust = -1) +\n  geom_text(aes(y = Kappa, label = round(Kappa, 3)), vjust = -1) +\n  scale_color_manual(values = c(\"#98c379\", \"#e06c75\"),\n                     guide = guide_legend(override.aes = list(linetype = c(1, 0)) )) +\n  scale_linetype_manual(values=c(\"solid\", \"dotted\"),\n                        guide = guide_legend(override.aes = list(color = c(\"#98c379\", \"#e06c75\")))) +\n  labs(x = \"K value\", \n       y = \"Accuracy / Kappa\",\n       title = \"KNN Model Performance (Repeated CV)\") +\n  ylim(0, 1) +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5)) +\n  guides(color = guide_legend(title = \"Metric\"),\n         linetype = guide_legend(title = \"Metric\"))\n```\n:::\n\n\n### Tuned\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"dataset\\\\model\\\\knn.model_repeatedCV_mod.Rdata\")\n\nknn.predictions <- predict(knn_model, newdata = test)\n\nconfusionMatrix(knn.predictions, test$good)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction   0   1\n         0 906  90\n         1  43 149\n                                          \n               Accuracy : 0.888           \n                 95% CI : (0.8687, 0.9054)\n    No Information Rate : 0.7988          \n    P-Value [Acc > NIR] : < 2.2e-16       \n                                          \n                  Kappa : 0.624           \n                                          \n Mcnemar's Test P-Value : 6.643e-05       \n                                          \n            Sensitivity : 0.9547          \n            Specificity : 0.6234          \n         Pos Pred Value : 0.9096          \n         Neg Pred Value : 0.7760          \n             Prevalence : 0.7988          \n         Detection Rate : 0.7626          \n   Detection Prevalence : 0.8384          \n      Balanced Accuracy : 0.7891          \n                                          \n       'Positive' Class : 0               \n                                          \n```\n:::\n\n```{.r .cell-code}\nknn.predictions <- as.numeric(knn.predictions)\npred_obj <- prediction(knn.predictions, test$good)\nauc_val <- performance(pred_obj, \"auc\")@y.values[[1]]\nauc_val\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.7890601\n```\n:::\n\n```{.r .cell-code}\nroc_obj <- performance(pred_obj, \"tpr\", \"fpr\")\n\nplot(roc_obj, colorize = TRUE, lwd = 2,\n     xlab = \"False Positive Rate\", \n     ylab = \"True Positive Rate\",\n     main = \"ROC Curves from Tuned Repeated CV\")\npoints(auc_val, 1 - auc_val, \n       col = \"steelblue\", \n       pch = 21)\nabline(a = 0, b = 1)\n```\n\n```{.r .cell-code}\nknn.repeatedCV_mod.ROC.plot <- recordPlot()\n\nknn.repeatedCV_mod.plot <- ggplot(knn_model) +\n  labs(x = \"K value\", \n       y = \"Accuracy\", \n       title = \"KNN Model Performance (Tuned Repeated CV)\") +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5)) \n```\n:::\n\n\n\n## Summary\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggarrange(knn.kfoldCV.plot,\n          knn.kfoldCV_mod.plot,\n          knn.holdoutCV.plot,\n          knn.holdoutCV_mod.plot,\n          knn.looCV.plot,\n          knn.looCV_mod.plot,\n          knn.repeatedCV.plot,\n          knn.repeatedCV_mod.plot,\n          ncol = 2, nrow = 4)\n```\n\n::: {.cell-output-display}\n![](knn_files/figure-html/knn.Accuracy.Kappa.Plot-1.png){width=1440}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncowplot::plot_grid(knn.kfoldCV.ROC.plot, knn.kfoldCV_mod.ROC.plot,\n                   ncol = 2, align = \"hv\", scale = 0.8)\n```\n\n::: {.cell-output-display}\n![](knn_files/figure-html/knn.ROC_curve-1.png){width=960}\n:::\n\n```{.r .cell-code}\ncowplot::plot_grid(knn.holdoutCV.ROC.plot, knn.holdoutCV_mod.ROC.plot,\n                   ncol = 2, align = \"hv\", scale = 0.8)\n```\n\n::: {.cell-output-display}\n![](knn_files/figure-html/knn.ROC_curve-2.png){width=960}\n:::\n\n```{.r .cell-code}\ncowplot::plot_grid(knn.looCV.ROC.plot, knn.looCV_mod.ROC.plot,\n                   ncol = 2, align = \"hv\", scale = 0.8)\n```\n\n::: {.cell-output-display}\n![](knn_files/figure-html/knn.ROC_curve-3.png){width=960}\n:::\n\n```{.r .cell-code}\ncowplot::plot_grid(knn.repeatedCV.ROC.plot, knn.repeatedCV_mod.ROC.plot,\n                   ncol = 2, align = \"hv\", scale = 0.8)\n```\n\n::: {.cell-output-display}\n![](knn_files/figure-html/knn.ROC_curve-4.png){width=960}\n:::\n:::\n\n\n\n\n| Resampling Method    | Error Rate | Sensitivity | Specificity | AUC       |\n| -------------------- | ---------- | ----------- | ----------- | --------- |\n| K-Fold CV            | 0.2273     | 0.9199      | 0.1883      | 0.5541001 |\n| K-Fold CV (Tuned)    | 0.1995     | 0.9768      | 0.1004      | 0.5386181 |\n| Hold-out CV          | 0.2222     | 0.9336      | 0.1590      | 0.5463051 |\n| Hold-out CV  (Tuned) | 0.2022     | 0.9926      | 0.0251      | 0.5088642 |\n| LOOCV                | 0.1717     | 0.9642      | 0.2887      | 0.6264379 |\n| LOOCV (Tuned)        | 0.1995     | 0.9768      | 0.1004      | 0.5386181 |\n| Repeated CV          | 0.1776     | 0.9104      | 0.4728      | 0.6916177 |\n| Repeated CV (Tuned)  | 0.1120     | 0.9547      | 0.6234      | 0.7890601 |\n\n\n\n::: {.cell}\n\n:::",
    "supporting": [
      "knn_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}