{
  "hash": "483ee17bb110a2052fe0130396fdcd09",
  "result": {
    "markdown": "---\ntitle: \"Exploratory Analysis\"\n---\n\n\n\n\n\n## Data Description\n\nThis is a dataset of wine quality containing 4898 observations of 12 variables. The variables are:\n\n-   `fixed.acidity`: The amount of fixed acid in the wine ($g/dm^3$)\n-   `volatile.acidity`: The amount of volatile acid in the wine ($g/dm^4$)\n-   `citric.acid`: The amount of citric acid in the wine ($g/dm^3$)\n-   `residual.sugar`: The amount of residual sugar in the wine ($g/dm^3$)\n-   `chlorides`: The amount of salt in the wine ($g/dm^3$)\n-   `free.sulfur.dioxide`: The amount of free sulfur dioxide in the wine ($mg/dm^3$)\n-   `total.sulfur.dioxide`: The amount of total sulfur dioxide in the wine ($mg/dm^3$)\n-   `density`: The density of the wine ($g/dm^3$)\n-   `pH`: The $pH$ value of the wine\n-   `sulphates`: The amount of sulphates in the wine ($g/dm^3$)\n-   `alcohol`: The alcohol content of the wine ($\\% vol$)\n-   `quality`: The quality score of the wine (0-10)\n\nAfter removing the duplicate rows from our data set, we are left with 3961 observations of the above 11 variables minus `quality` column variable, and introduced a new variable `good` as our response:\n\n-   `good`: A binary variable indicating whether the wine is good (`quality` $\\geq$ 7) or not (`quality` $<$ 7).\n\n\n## Data Import\n\n::: {.cell layout-align=\"TRUE\"}\n\n```{.r .cell-code}\n# Import original dataset\nwine.data <- read.csv(\"dataset\\\\winequality-white.csv\", sep=\";\", header = T)\n\nstr(wine.data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t4898 obs. of  12 variables:\n $ fixed.acidity       : num  7 6.3 8.1 7.2 7.2 8.1 6.2 7 6.3 8.1 ...\n $ volatile.acidity    : num  0.27 0.3 0.28 0.23 0.23 0.28 0.32 0.27 0.3 0.22 ...\n $ citric.acid         : num  0.36 0.34 0.4 0.32 0.32 0.4 0.16 0.36 0.34 0.43 ...\n $ residual.sugar      : num  20.7 1.6 6.9 8.5 8.5 6.9 7 20.7 1.6 1.5 ...\n $ chlorides           : num  0.045 0.049 0.05 0.058 0.058 0.05 0.045 0.045 0.049 0.044 ...\n $ free.sulfur.dioxide : num  45 14 30 47 47 30 30 45 14 28 ...\n $ total.sulfur.dioxide: num  170 132 97 186 186 97 136 170 132 129 ...\n $ density             : num  1.001 0.994 0.995 0.996 0.996 ...\n $ pH                  : num  3 3.3 3.26 3.19 3.19 3.26 3.18 3 3.3 3.22 ...\n $ sulphates           : num  0.45 0.49 0.44 0.4 0.4 0.44 0.47 0.45 0.49 0.45 ...\n $ alcohol             : num  8.8 9.5 10.1 9.9 9.9 10.1 9.6 8.8 9.5 11 ...\n $ quality             : int  6 6 6 6 6 6 6 6 6 6 ...\n```\n:::\n\n```{.r .cell-code}\n# Removing duplicate Rows, mutate our categorical response good\nwine.data_cleaned <-  wine.data %>% mutate(good = ifelse(quality>=7, 1, 0)) %>% distinct() %>% dplyr::select(-quality)\n\nstr(wine.data_cleaned)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t3961 obs. of  12 variables:\n $ fixed.acidity       : num  7 6.3 8.1 7.2 6.2 8.1 8.1 8.6 7.9 6.6 ...\n $ volatile.acidity    : num  0.27 0.3 0.28 0.23 0.32 0.22 0.27 0.23 0.18 0.16 ...\n $ citric.acid         : num  0.36 0.34 0.4 0.32 0.16 0.43 0.41 0.4 0.37 0.4 ...\n $ residual.sugar      : num  20.7 1.6 6.9 8.5 7 1.5 1.45 4.2 1.2 1.5 ...\n $ chlorides           : num  0.045 0.049 0.05 0.058 0.045 0.044 0.033 0.035 0.04 0.044 ...\n $ free.sulfur.dioxide : num  45 14 30 47 30 28 11 17 16 48 ...\n $ total.sulfur.dioxide: num  170 132 97 186 136 129 63 109 75 143 ...\n $ density             : num  1.001 0.994 0.995 0.996 0.995 ...\n $ pH                  : num  3 3.3 3.26 3.19 3.18 3.22 2.99 3.14 3.18 3.54 ...\n $ sulphates           : num  0.45 0.49 0.44 0.4 0.47 0.45 0.56 0.53 0.63 0.52 ...\n $ alcohol             : num  8.8 9.5 10.1 9.9 9.6 11 12 9.7 10.8 12.4 ...\n $ good                : num  0 0 0 0 0 0 0 0 0 1 ...\n```\n:::\n:::\n\n\n\n## Data Analysis\n\n::: {.cell layout-align=\"TRUE\"}\n\n```{.r .cell-code}\ndim(wine.data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4898   12\n```\n:::\n\n```{.r .cell-code}\ndim(wine.data_cleaned)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3961   12\n```\n:::\n\n```{.r .cell-code}\nsummary(wine.data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n fixed.acidity    volatile.acidity  citric.acid     residual.sugar  \n Min.   : 3.800   Min.   :0.0800   Min.   :0.0000   Min.   : 0.600  \n 1st Qu.: 6.300   1st Qu.:0.2100   1st Qu.:0.2700   1st Qu.: 1.700  \n Median : 6.800   Median :0.2600   Median :0.3200   Median : 5.200  \n Mean   : 6.855   Mean   :0.2782   Mean   :0.3342   Mean   : 6.391  \n 3rd Qu.: 7.300   3rd Qu.:0.3200   3rd Qu.:0.3900   3rd Qu.: 9.900  \n Max.   :14.200   Max.   :1.1000   Max.   :1.6600   Max.   :65.800  \n   chlorides       free.sulfur.dioxide total.sulfur.dioxide    density      \n Min.   :0.00900   Min.   :  2.00      Min.   :  9.0        Min.   :0.9871  \n 1st Qu.:0.03600   1st Qu.: 23.00      1st Qu.:108.0        1st Qu.:0.9917  \n Median :0.04300   Median : 34.00      Median :134.0        Median :0.9937  \n Mean   :0.04577   Mean   : 35.31      Mean   :138.4        Mean   :0.9940  \n 3rd Qu.:0.05000   3rd Qu.: 46.00      3rd Qu.:167.0        3rd Qu.:0.9961  \n Max.   :0.34600   Max.   :289.00      Max.   :440.0        Max.   :1.0390  \n       pH          sulphates         alcohol         quality     \n Min.   :2.720   Min.   :0.2200   Min.   : 8.00   Min.   :3.000  \n 1st Qu.:3.090   1st Qu.:0.4100   1st Qu.: 9.50   1st Qu.:5.000  \n Median :3.180   Median :0.4700   Median :10.40   Median :6.000  \n Mean   :3.188   Mean   :0.4898   Mean   :10.51   Mean   :5.878  \n 3rd Qu.:3.280   3rd Qu.:0.5500   3rd Qu.:11.40   3rd Qu.:6.000  \n Max.   :3.820   Max.   :1.0800   Max.   :14.20   Max.   :9.000  \n```\n:::\n\n```{.r .cell-code}\nsummary(wine.data_cleaned)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n fixed.acidity    volatile.acidity  citric.acid     residual.sugar  \n Min.   : 3.800   Min.   :0.0800   Min.   :0.0000   Min.   : 0.600  \n 1st Qu.: 6.300   1st Qu.:0.2100   1st Qu.:0.2700   1st Qu.: 1.600  \n Median : 6.800   Median :0.2600   Median :0.3200   Median : 4.700  \n Mean   : 6.839   Mean   :0.2805   Mean   :0.3343   Mean   : 5.915  \n 3rd Qu.: 7.300   3rd Qu.:0.3300   3rd Qu.:0.3900   3rd Qu.: 8.900  \n Max.   :14.200   Max.   :1.1000   Max.   :1.6600   Max.   :65.800  \n   chlorides       free.sulfur.dioxide total.sulfur.dioxide    density      \n Min.   :0.00900   Min.   :  2.00      Min.   :  9.0        Min.   :0.9871  \n 1st Qu.:0.03500   1st Qu.: 23.00      1st Qu.:106.0        1st Qu.:0.9916  \n Median :0.04200   Median : 33.00      Median :133.0        Median :0.9935  \n Mean   :0.04591   Mean   : 34.89      Mean   :137.2        Mean   :0.9938  \n 3rd Qu.:0.05000   3rd Qu.: 45.00      3rd Qu.:166.0        3rd Qu.:0.9957  \n Max.   :0.34600   Max.   :289.00      Max.   :440.0        Max.   :1.0390  \n       pH          sulphates         alcohol           good       \n Min.   :2.720   Min.   :0.2200   Min.   : 8.00   Min.   :0.0000  \n 1st Qu.:3.090   1st Qu.:0.4100   1st Qu.: 9.50   1st Qu.:0.0000  \n Median :3.180   Median :0.4800   Median :10.40   Median :0.0000  \n Mean   :3.195   Mean   :0.4904   Mean   :10.59   Mean   :0.2083  \n 3rd Qu.:3.290   3rd Qu.:0.5500   3rd Qu.:11.40   3rd Qu.:0.0000  \n Max.   :3.820   Max.   :1.0800   Max.   :14.20   Max.   :1.0000  \n```\n:::\n\n```{.r .cell-code}\n# Check for NAs in dataset\nsum(is.na(wine.data))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\n# Counts for response's at each factor level\ntable(wine.data$quality)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n   3    4    5    6    7    8    9 \n  20  163 1457 2198  880  175    5 \n```\n:::\n:::\n\n\n## Data Distribution\n\n::: {.cell layout-align=\"TRUE\"}\n\n```{.r .cell-code}\nwine.colnames <- colnames(wine.data)\nnum_plots     <- length(wine.colnames)\nnum_rows      <- ceiling(num_plots/3)\n\n# Create an empty list to store plots\ngrid_arr      <- list()\n\n# Loop over each column name in the wine.colnames vector\nfor(i in 1:num_plots) {\n  # Create a ggplot object for the current column using aes\n  plt <- ggplot(data = wine.data, aes_string(x = wine.colnames[i])) +\n    geom_histogram(binwidth = diff(range(wine.data[[wine.colnames[i]]]))/30, \n                   color = \"black\", fill = \"slategray3\") +\n    labs(x = wine.colnames[i], y = \"Frequency\") +\n    theme_bw()\n  \n  # Add the current plot to the grid_arr list\n  grid_arr[[i]] <- plt\n}\n\ngrid_arr <- do.call(gridExtra::grid.arrange, c(grid_arr, ncol = 3))\n```\n\n::: {.cell-output-display}\n![](analysis_files/figure-html/hist_plot-1.png){fig-align='TRUE' width=672}\n:::\n:::\n\n::: {.cell layout-align=\"TRUE\"}\n\n:::\n\n\n## Data Relationships\n\n::: {.cell layout-align=\"TRUE\"}\n\n```{.r .cell-code}\nreshape2::melt(wine.data[, 1:12], \"quality\") %>% \n  ggplot(aes(value, quality, color = variable)) +  \n  geom_point() + \n  geom_smooth(aes(value, quality, colour=variable), method=lm, se=FALSE)+\n  facet_wrap(.~variable, scales = \"free\")\n```\n\n::: {.cell-output-display}\n![](analysis_files/figure-html/relation_plot_original-1.png){fig-align='TRUE' width=960}\n:::\n\n```{.r .cell-code}\n# Collinearity between Attributes\ncor(wine.data) %>% \n  corrplot::corrplot(method = 'number',  type = \"lower\", tl.col = \"steelblue\", number.cex = 0.5)\n```\n\n::: {.cell-output-display}\n![](analysis_files/figure-html/relation_plot_original-2.png){fig-align='TRUE' width=960}\n:::\n:::\n\n::: {.cell layout-align=\"TRUE\"}\n\n```{.r .cell-code}\nreshape2::melt(wine.data_cleaned[, 1:12], \"good\") %>% \n  ggplot(aes(value, good, color = variable)) +  \n  geom_point() + \n  geom_smooth(aes(value, good, colour=variable), method=lm, se=FALSE)+\n  facet_wrap(.~variable, scales = \"free\")\n```\n\n::: {.cell-output-display}\n![](analysis_files/figure-html/relation_plot_cleaned-1.png){fig-align='TRUE' width=960}\n:::\n\n```{.r .cell-code}\n# Collinearity between Attributes\ncor(wine.data_cleaned) %>% \n  corrplot::corrplot(method = 'number',  type = \"lower\", tl.col = \"steelblue\", number.cex = 0.5)\n```\n\n::: {.cell-output-display}\n![](analysis_files/figure-html/relation_plot_cleaned-2.png){fig-align='TRUE' width=960}\n:::\n:::\n\n\n## Data Split\n\n::: {.cell layout-align=\"TRUE\"}\n\n```{.r .cell-code}\nset.seed(1234)\n# Splitting the dataset into train and test (7/10th for train remaining for test)\ninTrain <- caret::createDataPartition(wine.data_cleaned$good, p = 7/10, list = F)\ntrain <- wine.data_cleaned[inTrain,]\ntest  <- wine.data_cleaned[-inTrain,]\n\n\n# Convert the outcome variable to a factor with two levels\ntrain$good <- as.factor(train$good)\ntest$good <- as.factor(test$good)\n\n# Save data for building models in the next step\nsave(wine.data, file = \"dataset\\\\wine.data.Rdata\")\nsave(wine.data_cleaned, file = \"dataset\\\\wine.data_cleaned.Rdata\")\nsave(train, file = \"dataset\\\\train.Rdata\")\nsave(test, file = \"dataset\\\\test.Rdata\")\n```\n:::\n",
    "supporting": [
      "analysis_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}