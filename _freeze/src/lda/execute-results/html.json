{
  "hash": "8fe96f05a38e9e8d666e80ef7f6aee69",
  "result": {
    "markdown": "---\ntitle: \"Linear Discriminant Analysis\"\n---\n\n\n\n\n\n## K-fold CV (`caret`)\n\n::: {.cell layout-align=\"TRUE\"}\n\n```{.r .cell-code}\n#---------------------------#\n#----Model Construction-----#\n#---------------------------#\nset.seed(1234)\ntrain_control <- trainControl(method = \"cv\", number = 10)\n\nset.seed(1234)\nlda_model <- train(as.factor(good) ~ ., \n                   data = train, \n                   method = \"lda\", \n                   trControl = train_control)\n\nsave(lda_model, file = \"dataset\\\\lda.model_kfoldCV.Rdata\")\n```\n:::\n\n::: {.cell layout-align=\"TRUE\"}\n\n```{.r .cell-code}\n# Data Import\nload(\"dataset\\\\wine.data_cleaned.Rdata\")\nload(\"dataset\\\\train.Rdata\")\nload(\"dataset\\\\test.Rdata\")\n\n# Function Import\nload(\"dataset\\\\function\\\\accu.kappa.plot.Rdata\")\n\n# Model import\nload(\"dataset\\\\model\\\\lda.model_kfoldCV.Rdata\")\n\nlda.predictions <- predict(lda_model, newdata = test)\n\nconfusionMatrix(lda.predictions, test$good)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction   0   1\n         0 881 160\n         1  68  79\n                                          \n               Accuracy : 0.8081          \n                 95% CI : (0.7845, 0.8301)\n    No Information Rate : 0.7988          \n    P-Value [Acc > NIR] : 0.2246          \n                                          \n                  Kappa : 0.3024          \n                                          \n Mcnemar's Test P-Value : 1.674e-09       \n                                          \n            Sensitivity : 0.9283          \n            Specificity : 0.3305          \n         Pos Pred Value : 0.8463          \n         Neg Pred Value : 0.5374          \n             Prevalence : 0.7988          \n         Detection Rate : 0.7416          \n   Detection Prevalence : 0.8763          \n      Balanced Accuracy : 0.6294          \n                                          \n       'Positive' Class : 0               \n                                          \n```\n:::\n\n```{.r .cell-code}\nlda.predictions <- as.numeric(lda.predictions)\npred_obj <- prediction(lda.predictions, test$good)\n\n# Compute AUC value\nauc_val <- performance(pred_obj, \"auc\")@y.values[[1]]\nauc_val\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.6294448\n```\n:::\n\n```{.r .cell-code}\nlda.perf <- performance(pred_obj, \"tpr\", \"fpr\")\nplot(lda.perf, colorize = TRUE, lwd = 2,\n     xlab = \"False Positive Rate\", \n     ylab = \"True Positive Rate\",\n     main = \"caret::lda ROC Curves\")\nabline(a = 0, b = 1)\nx_values <- as.numeric(unlist(lda.perf@x.values))\ny_values <- as.numeric(unlist(lda.perf@y.values))\npolygon(x = x_values, y = y_values, \n        col = rgb(0.3803922, 0.6862745, 0.9372549, alpha = 0.3),\n        border = NA)\npolygon(x = c(0, 1, 1), y = c(0, 0, 1), \n        col = rgb(0.3803922, 0.6862745, 0.9372549, alpha = 0.3),\n        border = NA)\ntext(0.6, 0.4, paste(\"AUC =\", round(auc_val, 4)))\n```\n\n```{.r .cell-code}\nlda.kfoldCV_caret.ROC.plot <- recordPlot()\n```\n:::\n\n\n## K-fold CV (`MASS`)\n\n::: {.cell layout-align=\"TRUE\"}\n\n```{.r .cell-code}\n# Set the number of folds\nk <- 10\n\n# Randomly assign each row in the data to a fold\nset.seed(1234) # for reproducibility\nfold_indices <- sample(rep(1:k, length.out = nrow(wine.data_cleaned)))\n\n# Initialize an empty list to store the folds\nfolds <- vector(\"list\", k)\n\n# Assign each row to a fold\nfor (i in 1:k) {\n  folds[[i]] <- which(fold_indices == i)\n}\n\n#To store the error rate of each fold\nerror_rate <- numeric(k)\nkappa <- numeric(k)\nconfusion_matrices <- vector(\"list\", k)\n\n# Loop through each fold\nfor (i in 1:10) {\n  # Extract the i-th fold as the testing set\n  test_indices <- unlist(folds[[i]])\n  \n  test <- wine.data_cleaned[test_indices, ]\n  train <- wine.data_cleaned[-test_indices, ]\n  \n  # Fit the model on the training set\n  lda_model <- lda(good ~ ., data = train, family = binomial)\n  \n  # Make predictions on the testing set and calculate the error rate\n  lda.pred <- predict(lda_model, newdata = test, type = \"response\")\n  predicted_classes <- ifelse(lda.pred$posterior[, 2] > 0.7, 1, 0)\n\n  # Compute OER\n  error_rate[i] <- mean((predicted_classes > 0.7) != as.numeric(test$good))\n  \n  # Compute confusion matrix\n  test$good <- as.factor(test$good)\n  predicted_classes <- factor(predicted_classes, levels = c(0, 1))\n  confusion_matrices[[i]] <- caret::confusionMatrix(predicted_classes, test$good)\n  \n  # Compute Kappa value\n  kappa[i] <- confusion_matrices[[i]]$overall[[2]]\n  \n  # Print the error rates for each fold\n  cat(paste0(\"Fold \", i, \": \", \"OER:\", error_rate[i], \"\\n\"))\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFold 1: OER:0.193954659949622\nFold 2: OER:0.174242424242424\nFold 3: OER:0.202020202020202\nFold 4: OER:0.23989898989899\nFold 5: OER:0.176767676767677\nFold 6: OER:0.222222222222222\nFold 7: OER:0.184343434343434\nFold 8: OER:0.194444444444444\nFold 9: OER:0.159090909090909\nFold 10: OER:0.179292929292929\n```\n:::\n\n```{.r .cell-code}\nbest_confmat_index <- which.min(error_rate)\nbest_confmat_index\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9\n```\n:::\n\n```{.r .cell-code}\nconfusion_matrices[best_confmat_index]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\nConfusion Matrix and Statistics\n\n          Reference\nPrediction   0   1\n         0 325  62\n         1   1   8\n                                          \n               Accuracy : 0.8409          \n                 95% CI : (0.8011, 0.8755)\n    No Information Rate : 0.8232          \n    P-Value [Acc > NIR] : 0.197           \n                                          \n                  Kappa : 0.1691          \n                                          \n Mcnemar's Test P-Value : 4.053e-14       \n                                          \n            Sensitivity : 0.9969          \n            Specificity : 0.1143          \n         Pos Pred Value : 0.8398          \n         Neg Pred Value : 0.8889          \n             Prevalence : 0.8232          \n         Detection Rate : 0.8207          \n   Detection Prevalence : 0.9773          \n      Balanced Accuracy : 0.5556          \n                                          \n       'Positive' Class : 0               \n                                          \n```\n:::\n\n```{.r .cell-code}\n#AUC and Performance Plot\npredicted_classes <- as.numeric(predicted_classes)\npred_obj <- prediction(predicted_classes, test$good)\nlda.perf <- performance(pred_obj,\"tpr\",\"fpr\")\nauc_val <- performance(pred_obj, \"auc\")@y.values[[1]]\nauc_val\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.5488133\n```\n:::\n\n```{.r .cell-code}\nplot(lda.perf, colorize = TRUE, lwd = 2,\n     xlab = \"False Positive Rate\", \n     ylab = \"True Positive Rate\",\n     main = \"MASS::lda ROC Curves\")\nabline(a = 0, b = 1)\nx_values <- as.numeric(unlist(lda.perf@x.values))\ny_values <- as.numeric(unlist(lda.perf@y.values))\npolygon(x = x_values, y = y_values, \n        col = rgb(0.3803922, 0.6862745, 0.9372549, alpha = 0.3),\n        border = NA)\npolygon(x = c(0, 1, 1), y = c(0, 0, 1), \n        col = rgb(0.3803922, 0.6862745, 0.9372549, alpha = 0.3),\n        border = NA)\ntext(0.6, 0.4, paste(\"AUC =\", round(auc_val, 4)))\n```\n\n```{.r .cell-code}\nlda.kfoldCV_MASS.ROC.plot <- recordPlot()\n\nlda_df <- data.frame(k = 1:k,\n                     Accuracy = 1-error_rate, \n                     Kappa = kappa)\n\nlda.kfoldCV_MASS.plot <- accu.kappa.plot(lda_df) + \n  geom_text(aes(x = k, y = Accuracy, label = round(Accuracy, 3)), vjust = -1) +\n  geom_text(aes(x = k, y = Kappa, label = round(Kappa, 3)), vjust = -1) +\n  ggtitle(\"MASS::lda Model Performance (10-Fold CV)\")\n```\n:::\n\n::: {.cell layout-align=\"TRUE\"}\n\n```{.r .cell-code}\npng(\"dataset\\\\plot\\\\lda.png\", width = 2000, height = 2000, res = 150)\nklaR::partimat(as.factor(good) ~ ., data = train, method = \"lda\", \n         control = list(adip = 0.7, col.unmatched = \"grey\", \n                        col.matched = c(\"#E69F00\", \"#56B4E9\")), \n         pch = 19, cex = 1.5, varNames = predictor_vars)\n```\n:::\n\n![](dataset/plot/lda.png)\n\n\n\n## Summary\n\n::: {.cell layout-align=\"TRUE\"}\n\n```{.r .cell-code}\ncowplot::plot_grid(lda.kfoldCV_caret.ROC.plot,\n                   lda.kfoldCV_MASS.ROC.plot,\n                   ncol = 2, align = \"hv\", scale = 0.8)\n```\n\n::: {.cell-output-display}\n![](lda_files/figure-html/lda.ROC_curve-1.png){fig-align='TRUE' width=1920}\n:::\n:::\n\n\n| Model | Error Rate | Sensitivity | Specificity | AUC       |\n| ----------------- | ---------- | ----------- | ----------- | --------- |\n| LDA (`caret`)     | 0.1919     | 0.9283      | 0.3305      | 0.6294448 |\n| LDA (`MASS`)      | 0.1591     | 0.9969      | 0.1143      | 0.5488133 |\n\n\n::: {.cell layout-align=\"TRUE\"}\n\n:::\n",
    "supporting": [
      "lda_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}