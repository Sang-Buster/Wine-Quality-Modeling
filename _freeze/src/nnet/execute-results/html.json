{
  "hash": "3f43ddcf5f1bf53a7b5d01349c029b6a",
  "result": {
    "markdown": "---\ntitle: \"Neural Network\"\n---\n\n\n\n\n## Model Construction\n\n::: {.cell layout-align=\"TRUE\"}\n\n```{.r .cell-code}\n#-------------#\n#----NNet-----#\n#-------------#\nset.seed(1234)\ntrain_control <- trainControl(method = \"cv\", number = 10)\n\nset.seed(1234)\nnnet_model <- train(good ~ ., \n                    data = train, \n                    method = \"nnet\", \n                    trControl = train_control)\n\nsave(nnet_model, file = \"dataset\\\\model\\\\nnet.model_kfoldCV.Rdata\")\n```\n:::\n\n\n## K-fold CV\n\n::: {.cell layout-align=\"TRUE\"}\n\n```{.r .cell-code}\n# Data Import\nload(\"dataset\\\\wine.data_cleaned.Rdata\")\nload(\"dataset\\\\train.Rdata\")\nload(\"dataset\\\\test.Rdata\")\n\n# Function Import\nload(\"dataset\\\\function\\\\accu.kappa.plot.Rdata\")\n\n# Model import\nload(\"dataset\\\\model\\\\nnet.model_kfoldCV.Rdata\")\n\nnnet.predictions <- predict(nnet_model, newdata = test)\n\nconfusionMatrix(nnet.predictions, test$good)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction   0   1\n         0 890 157\n         1  59  82\n                                          \n               Accuracy : 0.8182          \n                 95% CI : (0.7951, 0.8397)\n    No Information Rate : 0.7988          \n    P-Value [Acc > NIR] : 0.0504          \n                                          \n                  Kappa : 0.3318          \n                                          \n Mcnemar's Test P-Value : 4.111e-11       \n                                          \n            Sensitivity : 0.9378          \n            Specificity : 0.3431          \n         Pos Pred Value : 0.8500          \n         Neg Pred Value : 0.5816          \n             Prevalence : 0.7988          \n         Detection Rate : 0.7492          \n   Detection Prevalence : 0.8813          \n      Balanced Accuracy : 0.6405          \n                                          \n       'Positive' Class : 0               \n                                          \n```\n:::\n\n```{.r .cell-code}\nnnet.predictions <- as.numeric(nnet.predictions)\npred_obj <- prediction(nnet.predictions, test$good)\nauc_val <- performance(pred_obj, \"auc\")@y.values[[1]]\nauc_val\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.6404628\n```\n:::\n\n```{.r .cell-code}\nroc_obj <- performance(pred_obj, \"tpr\", \"fpr\")\nplot(roc_obj, colorize = TRUE, lwd = 2,\n     xlab = \"False Positive Rate\", \n     ylab = \"True Positive Rate\",\n     main = \"Neural Network (10-fold CV)\")\nabline(a = 0, b = 1)\nx_values <- as.numeric(unlist(roc_obj@x.values))\ny_values <- as.numeric(unlist(roc_obj@y.values))\npolygon(x = x_values, y = y_values, \n        col = rgb(0.3803922, 0.6862745, 0.9372549, alpha = 0.3),\n        border = NA)\npolygon(x = c(0, 1, 1), y = c(0, 0, 1), \n        col = rgb(0.3803922, 0.6862745, 0.9372549, alpha = 0.3),\n        border = NA)\ntext(0.6, 0.4, paste(\"AUC =\", round(auc_val, 4)))\n```\n\n```{.r .cell-code}\nnnet.kfoldCV.ROC.plot <- recordPlot()\n\npander::pander(nnet_model$results)\n```\n\n::: {.cell-output-display}\n----------------------------------------------------------\n size   decay   Accuracy    Kappa    AccuracySD   KappaSD \n------ ------- ---------- --------- ------------ ---------\n  1       0      0.7934    0.1102     0.01513     0.1776  \n\n  1     1e-04    0.7854    0.02762    0.003511    0.08735 \n\n  1      0.1     0.7927     0.149     0.01041     0.1597  \n\n  3       0      0.7905    0.1011      0.0108     0.1638  \n\n  3     1e-04    0.7963    0.1523      0.0159     0.1971  \n\n  3      0.1     0.8046     0.323     0.01708     0.0539  \n\n  5       0      0.7955    0.1138      0.0249     0.1934  \n\n  5     1e-04    0.7912    0.09769    0.01428     0.1613  \n\n  5      0.1     0.8071    0.3337      0.016      0.05427 \n----------------------------------------------------------\n:::\n:::\n\n\n## Summary\n\n::: {.cell layout-align=\"TRUE\"}\n\n```{.r .cell-code}\ncowplot::plot_grid(nnet.kfoldCV.ROC.plot)\n```\n\n::: {.cell-output-display}\n![](nnet_files/figure-html/unnamed-chunk-1-1.png){fig-align='TRUE' width=480}\n:::\n:::\n\n\n| Resampling Method    | Error Rate | Sensitivity | Specificity | AUC       |\n| -------------------- | ---------- | ----------- | ----------- | --------- |\n| Neural Network       | 0.1818     | 0.9378      | 0.3431      | 0.6404628 |\n\n\n::: {.cell layout-align=\"TRUE\"}\n\n:::\n",
    "supporting": [
      "nnet_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}