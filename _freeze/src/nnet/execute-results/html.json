{
  "hash": "fe6d22779aff53227562a7cf48079520",
  "result": {
    "markdown": "---\ntitle: \"Neural Network\"\n---\n\n\n\n\n## Model Construction\n\n::: {.cell layout-align=\"TRUE\"}\n\n```{.r .cell-code}\n#-------------#\n#----NNet-----#\n#-------------#\nset.seed(1234)\ntrain_control <- trainControl(method = \"cv\", number = 10)\n\nset.seed(1234)\nnnet_model <- train(good ~ ., \n                    data = train, \n                    method = \"nnet\", \n                    trControl = train_control)\n\nsave(nnet_model, file = \"dataset\\\\model\\\\nnet.model_kfoldCV.Rdata\")\n```\n:::\n\n\n## K-fold CV\n\n::: {.cell layout-align=\"TRUE\"}\n\n```{.r .cell-code}\n# Data Import\nload(\"dataset\\\\wine.data.Rdata\")\nload(\"dataset\\\\train.Rdata\")\nload(\"dataset\\\\test.Rdata\")\n\n# Model Import\nload(\"dataset\\\\model\\\\nnet.model_kfoldCV.Rdata\")\n\nnnet.predictions <- predict(nnet_model, newdata = test)\n\nconfusionMatrix(nnet.predictions, test$good)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction   0   1\n         0 895 148\n         1  66  79\n                                          \n               Accuracy : 0.8199          \n                 95% CI : (0.7968, 0.8413)\n    No Information Rate : 0.8089          \n    P-Value [Acc > NIR] : 0.1784          \n                                          \n                  Kappa : 0.324           \n                                          \n Mcnemar's Test P-Value : 3.076e-08       \n                                          \n            Sensitivity : 0.9313          \n            Specificity : 0.3480          \n         Pos Pred Value : 0.8581          \n         Neg Pred Value : 0.5448          \n             Prevalence : 0.8089          \n         Detection Rate : 0.7534          \n   Detection Prevalence : 0.8779          \n      Balanced Accuracy : 0.6397          \n                                          \n       'Positive' Class : 0               \n                                          \n```\n:::\n\n```{.r .cell-code}\nnnet.predictions <- as.numeric(nnet.predictions)\npred_obj <- prediction(nnet.predictions, test$good)\nauc_val <- performance(pred_obj, \"auc\")@y.values[[1]]\nauc_val\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.6396696\n```\n:::\n\n```{.r .cell-code}\nroc_obj <- performance(pred_obj, \"tpr\", \"fpr\")\nplot(roc_obj, colorize = TRUE, lwd = 2,\n     xlab = \"False Positive Rate\", \n     ylab = \"True Positive Rate\",\n     main = \"ROC Curves from Repeated CV\")\npoints(auc_val, 1 - auc_val, \n       col = \"steelblue\", \n       pch = 21)\nabline(a = 0, b = 1)\n```\n\n```{.r .cell-code}\nnnet.kfoldCV.ROC.plot <- recordPlot()\n```\n:::\n\n\n### Tuned\n\n::: {.cell layout-align=\"TRUE\"}\n\n:::\n\n\n| Resampling Method    | Error Rate | Sensitivity | Specificity | AUC       |\n| -------------------- | ---------- | ----------- | ----------- | --------- |\n| Neural Network       | 0.1801     | 0.9313      | 0.3480      | 0.6396696 |\n| Neural Network       | 0.xxxx     | 0.xxxx      | 0.xxxx      | 0.xxxxxxx |\n\n\n::: {.cell layout-align=\"TRUE\"}\n\n:::\n\n\n## Summary\n\n\n::: {.cell layout-align=\"TRUE\"}\n\n:::\n\n::: {.cell layout-align=\"TRUE\"}\n\n```{.r .cell-code}\ncowplot::plot_grid(nb.kfoldCV.ROC.plot,\n                   dc.kfoldCV.ROC.plot,\n                   rf.kfoldCV.ROC.plot,\n                   bag.kfoldCV.ROC.plot, \n                   ncol = 2, align = \"hv\", scale = 0.8)\n```\n\n::: {.cell-output-display}\n![](nnet_files/figure-html/unnamed-chunk-3-1.png){fig-align='TRUE' width=960}\n:::\n\n```{.r .cell-code}\ncowplot::plot_grid(boost.kfoldCV.ROC.plot,\n                   svm.kfoldCV.ROC.plot,\n                   xgboost.kfoldCV.ROC.plot,\n                   nnet.kfoldCV.ROC.plot,\n                   ncol = 2, align = \"hv\", scale = 0.8)\n```\n\n::: {.cell-output-display}\n![](nnet_files/figure-html/unnamed-chunk-3-2.png){fig-align='TRUE' width=960}\n:::\n:::\n\n\n| Resampling Method | Error Rate | Sensitivity | Specificity | AUC       |\n| ----------------- | ---------- | ----------- | ----------- | --------- |\n| Naive Bayes       | 0.2391     | 0.7804      | 0.6784      | 0.7294256 |\n| CART              | 0.181      | 0.9032      | 0.4626      | 0.6828904 |\n| Random Forest     | 0.1540     | 0.9501      | 0.4053      | 0.6776692 |\n| Bagging           | 0.1658     | 0.9178      | 0.4802      | 0.6989851 |\n| boost             | 0.1751     | 0.9251      | 0.4009      | 0.6629796 |\n| XGBoost           | 0.1633     | 0.9428      | 0.3877      | 0.6652166 |\n| SVM               | 0.1675     | 0.9646      | 0.2731      | 0.6188740 |\n| Neural Network    | 0.1801     | 0.9313      | 0.3480      | 0.6396696 |",
    "supporting": [
      "nnet_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}