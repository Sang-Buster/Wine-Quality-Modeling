{
  "hash": "345bde5db7ff7ef5499c936e88c98534",
  "result": {
    "markdown": "---\ntitle: \"Quadratic Discriminant Analysis\"\n---\n\n\n\n\n\n## K-fold CV (`caret`)\n\n::: {.cell layout-align=\"TRUE\"}\n\n```{.r .cell-code}\n#---------------------------#\n#----Model Construction-----#\n#---------------------------#\nset.seed(1234)\ntrain_control <- trainControl(method = \"cv\", number = 10)\n\nset.seed(1234)\nqda_model <- train(good ~ ., \n                   data = train, \n                   method = \"qda\", \n                   trControl = train_control)\n\nsave(qda_model, file = \"dataset\\\\qda.model_kfoldCV.Rdata\")\n```\n:::\n\n::: {.cell layout-align=\"TRUE\"}\n\n```{.r .cell-code}\n# Data Import\nload(\"dataset\\\\wine.data_cleaned.Rdata\")\nload(\"dataset\\\\train.Rdata\")\nload(\"dataset\\\\test.Rdata\")\n\n# Function Import\nload(\"dataset\\\\function\\\\accu.kappa.plot.Rdata\")\n\n# Model import\nload(\"dataset\\\\model\\\\qda.model_kfoldCV.Rdata\")\n\nqda.predictions <- predict(qda_model, newdata = test)\n\nconfusionMatrix(qda.predictions, test$good)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction   0   1\n         0 704  59\n         1 245 180\n                                          \n               Accuracy : 0.7441          \n                 95% CI : (0.7183, 0.7687)\n    No Information Rate : 0.7988          \n    P-Value [Acc > NIR] : 1               \n                                          \n                  Kappa : 0.3834          \n                                          \n Mcnemar's Test P-Value : <2e-16          \n                                          \n            Sensitivity : 0.7418          \n            Specificity : 0.7531          \n         Pos Pred Value : 0.9227          \n         Neg Pred Value : 0.4235          \n             Prevalence : 0.7988          \n         Detection Rate : 0.5926          \n   Detection Prevalence : 0.6423          \n      Balanced Accuracy : 0.7475          \n                                          \n       'Positive' Class : 0               \n                                          \n```\n:::\n\n```{.r .cell-code}\nk <- 10\nqda.predictions <- as.numeric(qda.predictions)\npred_obj <- prediction(qda.predictions, test$good)\n\n# Compute AUC value\nauc_val <- performance(pred_obj, \"auc\")@y.values[[1]]\nauc_val\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.7474858\n```\n:::\n\n```{.r .cell-code}\nqda.perf <- performance(pred_obj, \"tpr\", \"fpr\")\nplot(qda.perf, colorize = TRUE, lwd = 2,\n     xlab = \"False Positive Rate\", \n     ylab = \"True Positive Rate\",\n     main = \"caret::qda ROC Curves\")\nabline(a = 0, b = 1)\nx_values <- as.numeric(unlist(qda.perf@x.values))\ny_values <- as.numeric(unlist(qda.perf@y.values))\npolygon(x = x_values, y = y_values, \n        col = rgb(0.3803922, 0.6862745, 0.9372549, alpha = 0.3),\n        border = NA)\npolygon(x = c(0, 1, 1), y = c(0, 0, 1), \n        col = rgb(0.3803922, 0.6862745, 0.9372549, alpha = 0.3),\n        border = NA)\ntext(0.6, 0.4, paste(\"AUC =\", round(auc_val, 4)))\n```\n\n```{.r .cell-code}\nqda.kfoldCV_caret.ROC.plot <- recordPlot()\n\nqda_df <- data.frame(k = 1:k,\n                     Accuracy = qda_model$results$Accuracy,\n                     Kappa = qda_model$results$Kappa)\n```\n:::\n\n\n## K-fold CV (`MASS`)\n\n::: {.cell layout-align=\"TRUE\"}\n\n```{.r .cell-code}\n# Set the number of folds\nk <- 10\n\n# Randomly assign each row in the data to a fold\nset.seed(1234) # for reproducibility\nfold_indices <- sample(rep(1:k, length.out = nrow(wine.data_cleaned)))\n\n# Initialize an empty list to store the folds\nfolds <- vector(\"list\", k)\n\n# Assign each row to a fold\nfor (i in 1:k) {\n  folds[[i]] <- which(fold_indices == i)\n}\n\n#To store the error rate of each fold\nerror_rate <- numeric(k)\nconfusion_matrices <- vector(\"list\", k)\nkappa <- numeric(k)\n\n\n# Loop through each fold\nfor (i in 1:10) {\n  # Extract the i-th fold as the testing set\n  test_indices <- unlist(folds[[i]])\n  \n  test <- wine.data_cleaned[test_indices, ]\n  train <- wine.data_cleaned[-test_indices, ]\n  \n  # Fit the model on the training set\n  qda_model <- qda(good ~ ., data = train, family = binomial)\n  \n  # Make predictions on the testing set and calculate the error rate\n  qda.pred <- predict(qda_model, newdata = test, type = \"response\")\n  predicted_classes <- ifelse(qda.pred$posterior[,2] > 0.7, 1, 0)\n  \n  # Compute OER\n  error_rate[i] <- mean((predicted_classes > 0.7) != as.numeric(test$good))\n  \n  # Compute confusion matrix\n  test$good <- as.factor(test$good)\n  predicted_classes <- factor(predicted_classes, levels = c(0, 1))\n  confusion_matrices[[i]] <- caret::confusionMatrix(predicted_classes, test$good)\n  \n  # Compute Kappa value\n  kappa[i] <- confusion_matrices[[i]]$overall[[2]]\n  \n  # Print the error rates for each fold\n  cat(paste0(\"Fold \", i, \": \", \"OER:\", error_rate[i], \"\\n\"))\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFold 1: OER:0.19647355163728\nFold 2: OER:0.171717171717172\nFold 3: OER:0.232323232323232\nFold 4: OER:0.212121212121212\nFold 5: OER:0.20959595959596\nFold 6: OER:0.222222222222222\nFold 7: OER:0.194444444444444\nFold 8: OER:0.207070707070707\nFold 9: OER:0.174242424242424\nFold 10: OER:0.169191919191919\n```\n:::\n\n```{.r .cell-code}\nbest_confmat_index <- which.min(error_rate)\nbest_confmat_index\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n\n```{.r .cell-code}\nconfusion_matrices[best_confmat_index]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\nConfusion Matrix and Statistics\n\n          Reference\nPrediction   0   1\n         0 285  33\n         1  34  44\n                                          \n               Accuracy : 0.8308          \n                 95% CI : (0.7902, 0.8664)\n    No Information Rate : 0.8056          \n    P-Value [Acc > NIR] : 0.1126          \n                                          \n                  Kappa : 0.4626          \n                                          \n Mcnemar's Test P-Value : 1.0000          \n                                          \n            Sensitivity : 0.8934          \n            Specificity : 0.5714          \n         Pos Pred Value : 0.8962          \n         Neg Pred Value : 0.5641          \n             Prevalence : 0.8056          \n         Detection Rate : 0.7197          \n   Detection Prevalence : 0.8030          \n      Balanced Accuracy : 0.7324          \n                                          \n       'Positive' Class : 0               \n                                          \n```\n:::\n\n```{.r .cell-code}\n#AUC and Performance Plot\npredicted_classes <- as.numeric(predicted_classes)\npred_obj <- prediction(predicted_classes, test$good)\nauc_val <- performance(pred_obj, \"auc\")@y.values[[1]]\nqda.perf <- performance(pred_obj,\"tpr\",\"fpr\")\nauc_val\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.7324227\n```\n:::\n\n```{.r .cell-code}\nplot(qda.perf, colorize = TRUE, lwd = 2,\n     xlab = \"False Positive Rate\", \n     ylab = \"True Positive Rate\",\n     main = \"MASS::qda ROC Curves\")\nabline(a = 0, b = 1)\nx_values <- as.numeric(unlist(qda.perf@x.values))\ny_values <- as.numeric(unlist(qda.perf@y.values))\npolygon(x = x_values, y = y_values, \n        col = rgb(0.3803922, 0.6862745, 0.9372549, alpha = 0.3),\n        border = NA)\npolygon(x = c(0, 1, 1), y = c(0, 0, 1), \n        col = rgb(0.3803922, 0.6862745, 0.9372549, alpha = 0.3),\n        border = NA)\ntext(0.6, 0.4, paste(\"AUC =\", round(auc_val, 4)))\n```\n\n```{.r .cell-code}\nqda.kfoldCV_MASS.ROC.plot <- recordPlot()\n\nqda_df <- data.frame(k = 1:k,\n                     Accuracy = 1-error_rate, \n                     Kappa = kappa)\n\nqda.kfoldCV_MASS.plot <- accu.kappa.plot(qda_df) + \n  geom_text(aes(x = k, y = Accuracy, label = round(Accuracy, 3)), vjust = -1) +\n  geom_text(aes(x = k, y = Kappa, label = round(Kappa, 3)), vjust = -1) +\n  ggtitle(\"MASS::qda Model Performance (10-Fold CV)\")\n```\n:::\n\n::: {.cell layout-align=\"TRUE\"}\n\n```{.r .cell-code}\npng(\"myplot.png\", width = 2000, height = 2000, res = 150)\nklaR::partimat(as.factor(good) ~ ., data = train, method = \"qda\", \n         control = list(adip = 0.7, col.unmatched = \"grey\", \n                        col.matched = c(\"#E69F00\", \"#56B4E9\")), \n         pch = 19, cex = 1.5, varNames = predictor_vars)\ndev.off()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\npng \n  2 \n```\n:::\n:::\n\n\n\n\n## Summary\n\n::: {.cell layout-align=\"TRUE\"}\n\n```{.r .cell-code}\ncowplot::plot_grid(qda.kfoldCV_caret.ROC.plot,\n                   qda.kfoldCV_MASS.ROC.plot,\n                   ncol = 2, align = \"hv\", scale = 0.8)\n```\n\n::: {.cell-output-display}\n![](qda_files/figure-html/qda.ROC_curve-1.png){fig-align='TRUE' width=1920}\n:::\n:::\n\n\n| Resampling Method | Error Rate | Sensitivity | Specificity | AUC       |\n| ----------------- | ---------- | ----------- | ----------- | --------- |\n| QDA (`caret`)     | 0.2559     | 0.7418      | 0.7531      | 0.7474858 |\n| QDA (`MASS`)      | 0.1692     | 0.8934      | 0.5714      | 0.7324227 |\n\n\n\n::: {.cell layout-align=\"TRUE\"}\n\n:::\n",
    "supporting": [
      "qda_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}