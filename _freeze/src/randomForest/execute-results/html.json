{
  "hash": "2c3d735add1e60afb25e5fa1a1ccb068",
  "result": {
    "markdown": "---\ntitle: \"Random Forest (Classification)\"\n---\n\n\n\n\n\n## Model Construction\n\n::: {.cell layout-align=\"TRUE\"}\n\n```{.r .cell-code}\n#----------------------#\n#----Random Forest-----#\n#----------------------#\nset.seed(1234)\ntrain_control <- trainControl(method = \"cv\", number = 10)\n\nset.seed(1234)\nrf_model <- train(good ~ ., \n               data = train, \n               method = \"rf\", \n               trControl = train_control)\n\nsave(rf_model, file = \"dataset\\\\model\\\\rf.model_kfoldCV.Rdata\")\n```\n:::\n\n\n## K-fold CV\n\n::: {.cell layout-align=\"TRUE\"}\n\n```{.r .cell-code}\n# Data Import\nload(\"dataset\\\\wine.data.Rdata\")\nload(\"dataset\\\\train.Rdata\")\nload(\"dataset\\\\test.Rdata\")\n\n# Model Import\nload(\"dataset\\\\model\\\\rf.model_kfoldCV.Rdata\")\n\nrf.predictions <- predict(rf_model, newdata = test)\n\nconfusionMatrix(rf.predictions, test$good)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction   0   1\n         0 913 135\n         1  48  92\n                                         \n               Accuracy : 0.846          \n                 95% CI : (0.8242, 0.866)\n    No Information Rate : 0.8089         \n    P-Value [Acc > NIR] : 0.0005039      \n                                         \n                  Kappa : 0.4163         \n                                         \n Mcnemar's Test P-Value : 2.053e-10      \n                                         \n            Sensitivity : 0.9501         \n            Specificity : 0.4053         \n         Pos Pred Value : 0.8712         \n         Neg Pred Value : 0.6571         \n             Prevalence : 0.8089         \n         Detection Rate : 0.7685         \n   Detection Prevalence : 0.8822         \n      Balanced Accuracy : 0.6777         \n                                         \n       'Positive' Class : 0              \n                                         \n```\n:::\n\n```{.r .cell-code}\nrf.predictions <- as.numeric(rf.predictions)\npred_obj <- prediction(rf.predictions, test$good)\nauc_val <- performance(pred_obj, \"auc\")@y.values[[1]]\nauc_val\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.6776692\n```\n:::\n\n```{.r .cell-code}\nroc_obj <- performance(pred_obj, \"tpr\", \"fpr\")\nplot(roc_obj, colorize = TRUE, lwd = 2,\n     xlab = \"False Positive Rate\", \n     ylab = \"True Positive Rate\",\n     main = \"ROC Curves from Repeated CV\")\npoints(auc_val, 1 - auc_val, \n       col = \"steelblue\", \n       pch = 21)\nabline(a = 0, b = 1)\n```\n\n```{.r .cell-code}\nrf.kfoldCV.ROC.plot <- recordPlot()\n```\n:::\n\n\n### Tuned\n\n::: {.cell layout-align=\"TRUE\"}\n\n:::\n\n\n| Resampling Method    | Error Rate | Sensitivity | Specificity | AUC       |\n| -------------------- | ---------- | ----------- | ----------- | --------- |\n| Random Forest        | 0.1540     | 0.9501      | 0.4053      | 0.6776692 |\n| Random Forest (Tuned)| 0.xxxx     | 0.xxxx      | 0.xxxx      | 0.xxxxxxx |\n\n\n::: {.cell layout-align=\"TRUE\"}\n\n:::",
    "supporting": [
      "randomForest_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}