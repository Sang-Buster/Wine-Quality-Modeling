{
  "hash": "f62ed3452e338791e164611b282b72d9",
  "result": {
    "markdown": "---\ntitle: \"Support Vectir Machine (SVM)\"\n---\n\n\n\n\n\n## Model Construction\n\n::: {.cell layout-align=\"TRUE\"}\n\n```{.r .cell-code}\n#------------#\n#----SVM-----#\n#------------#\nset.seed(1234)\ntrain_control <- trainControl(method = \"cv\", number = 10)\n\nset.seed(1234)\nsvm_model <- train(good ~ ., \n               data = train, \n               method = \"svmRadial\", \n               trControl = train_control)\n\nsave(svm_model, file = \"dataset\\\\model\\\\svm.model_kfoldCV.Rdata\")\n```\n:::\n\n\n## K-fold CV\n\n::: {.cell layout-align=\"TRUE\"}\n\n```{.r .cell-code}\n# Data Import\nload(\"dataset\\\\train.Rdata\")\nload(\"dataset\\\\test.Rdata\")\n\n# Model Import\nload(\"dataset\\\\model\\\\svm.model_kfoldCV.Rdata\")\n\nsvm.predictions <- predict(svm_model, newdata = test)\n\nconfusionMatrix(svm.predictions, test$good)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction   0   1\n         0 927 165\n         1  34  62\n                                        \n               Accuracy : 0.8325        \n                 95% CI : (0.81, 0.8533)\n    No Information Rate : 0.8089        \n    P-Value [Acc > NIR] : 0.01995       \n                                        \n                  Kappa : 0.305         \n                                        \n Mcnemar's Test P-Value : < 2e-16       \n                                        \n            Sensitivity : 0.9646        \n            Specificity : 0.2731        \n         Pos Pred Value : 0.8489        \n         Neg Pred Value : 0.6458        \n             Prevalence : 0.8089        \n         Detection Rate : 0.7803        \n   Detection Prevalence : 0.9192        \n      Balanced Accuracy : 0.6189        \n                                        \n       'Positive' Class : 0             \n                                        \n```\n:::\n\n```{.r .cell-code}\nsvm.predictions <- as.numeric(svm.predictions)\npred_obj <- prediction(svm.predictions, test$good)\nauc_val <- performance(pred_obj, \"auc\")@y.values[[1]]\nauc_val\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.618874\n```\n:::\n\n```{.r .cell-code}\nroc_obj <- performance(pred_obj, \"tpr\", \"fpr\")\nplot(roc_obj, colorize = TRUE, lwd = 2,\n     xlab = \"False Positive Rate\", \n     ylab = \"True Positive Rate\",\n     main = \"ROC Curves from Repeated CV\")\npoints(auc_val, 1 - auc_val, \n       col = \"steelblue\", \n       pch = 21)\nabline(a = 0, b = 1)\n```\n\n```{.r .cell-code}\nsvm.kfoldCV.ROC.plot <- recordPlot()\n```\n:::\n\n\n### Tuned\n\n::: {.cell layout-align=\"TRUE\"}\n\n:::\n\n\n| Resampling Method    | Error Rate | Sensitivity | Specificity | AUC       |\n| -------------------- | ---------- | ----------- | ----------- | --------- |\n| SVM                  | 0.1675     | 0.9646      | 0.2731      | 0.618874  |\n| SVM (Tuned)          | 0.xxxx     | 0.xxxx      | 0.xxxx      | 0.xxxxxxx |\n\n\n::: {.cell layout-align=\"TRUE\"}\n\n:::",
    "supporting": [
      "svm_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}