{
  "hash": "138590209fb9413e327037967de621bf",
  "result": {
    "markdown": "---\ntitle: \"Boosting\"\n---\n\n\n\n\n\n## Model Construction\n\n::: {.cell layout-align=\"TRUE\"}\n\n```{.r .cell-code}\n#--------------#\n#----boost-----#\n#--------------#\nset.seed(1234)\ntrain_control <- trainControl(method = \"cv\", number = 10)\n\nset.seed(1234)\nboost_model <- train(good ~ ., \n               data = train, \n               method = \"gbm\", \n               trControl = train_control)\n\nsave(boost_model, file = \"dataset\\\\model\\\\boost.model_kfoldCV.Rdata\")\n```\n:::\n\n\n## K-fold CV\n\n::: {.cell layout-align=\"TRUE\"}\n\n```{.r .cell-code}\n# Data Import\nload(\"dataset\\\\wine.data.Rdata\")\nload(\"dataset\\\\train.Rdata\")\nload(\"dataset\\\\test.Rdata\")\n\n# Model Import\nload(\"dataset\\\\model\\\\boost.model_kfoldCV.Rdata\")\n\nboost.predictions <- predict(boost_model, newdata = test)\n\nconfusionMatrix(boost.predictions, test$good)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction   0   1\n         0 889 136\n         1  72  91\n                                          \n               Accuracy : 0.8249          \n                 95% CI : (0.8021, 0.8461)\n    No Information Rate : 0.8089          \n    P-Value [Acc > NIR] : 0.085           \n                                          \n                  Kappa : 0.3653          \n                                          \n Mcnemar's Test P-Value : 1.252e-05       \n                                          \n            Sensitivity : 0.9251          \n            Specificity : 0.4009          \n         Pos Pred Value : 0.8673          \n         Neg Pred Value : 0.5583          \n             Prevalence : 0.8089          \n         Detection Rate : 0.7483          \n   Detection Prevalence : 0.8628          \n      Balanced Accuracy : 0.6630          \n                                          \n       'Positive' Class : 0               \n                                          \n```\n:::\n\n```{.r .cell-code}\nboost.predictions <- as.numeric(boost.predictions)\npred_obj <- prediction(boost.predictions, test$good)\nauc_val <- performance(pred_obj, \"auc\")@y.values[[1]]\nauc_val\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.6629796\n```\n:::\n\n```{.r .cell-code}\nroc_obj <- performance(pred_obj, \"tpr\", \"fpr\")\nplot(roc_obj, colorize = TRUE, lwd = 2,\n     xlab = \"False Positive Rate\", \n     ylab = \"True Positive Rate\",\n     main = \"ROC Curves from Repeated CV\")\npoints(auc_val, 1 - auc_val, \n       col = \"steelblue\", \n       pch = 21)\nabline(a = 0, b = 1)\n```\n\n```{.r .cell-code}\nboost.kfoldCV.ROC.plot <- recordPlot()\n```\n:::\n\n\n### Tuned\n\n::: {.cell layout-align=\"TRUE\"}\n\n:::\n\n\n| Resampling Method    | Error Rate | Sensitivity | Specificity | AUC       |\n| -------------------- | ---------- | ----------- | ----------- | --------- |\n| Boost                | 0.1751     | 0.9251      | 0.4009      | 0.6629796 |\n| Boost (Tuned)        | 0.xxxx     | 0.xxxx      | 0.xxxx      | 0.xxxxxxx |\n\n\n::: {.cell layout-align=\"TRUE\"}\n\n:::",
    "supporting": [
      "boosting_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}