{
  "hash": "6b3dc2deec00f84836e3deeaca9c70aa",
  "result": {
    "markdown": "---\ntitle: \"Boosting\"\n---\n\n\n\n\n\n## Model Construction\n\n::: {.cell layout-align=\"TRUE\"}\n\n```{.r .cell-code}\n#--------------#\n#----boost-----#\n#--------------#\nset.seed(1234)\ntrain_control <- trainControl(method = \"cv\", number = 10)\n\nset.seed(1234)\nboost_model <- train(good ~ ., \n                     data = train, \n                     method = \"gbm\", \n                     trControl = train_control)\n\nsave(boost_model, file = \"dataset\\\\model\\\\boost.model_kfoldCV.Rdata\")\n```\n:::\n\n\n## K-fold CV\n\n::: {.cell layout-align=\"TRUE\"}\n\n```{.r .cell-code}\n# Data Import\nload(\"dataset\\\\wine.data_cleaned.Rdata\")\nload(\"dataset\\\\train.Rdata\")\nload(\"dataset\\\\test.Rdata\")\n\n# Function Import\nload(\"dataset\\\\function\\\\accu.kappa.plot.Rdata\")\n\n# Model import\nload(\"dataset\\\\model\\\\boost.model_kfoldCV.Rdata\")\n\nboost.predictions <- predict(boost_model, newdata = test)\n\nrmse <- sqrt(mean((boost.predictions - test$good) ^ 2))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in Ops.factor(boost.predictions, test$good): '-' not meaningful for\nfactors\n```\n:::\n\n```{.r .cell-code}\nmae <- mean(abs(boost.predictions - test$good))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in Ops.factor(boost.predictions, test$good): '-' not meaningful for\nfactors\n```\n:::\n\n```{.r .cell-code}\nconfusionMatrix(boost.predictions, test$good)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction   0   1\n         0 889 136\n         1  72  91\n                                          \n               Accuracy : 0.8249          \n                 95% CI : (0.8021, 0.8461)\n    No Information Rate : 0.8089          \n    P-Value [Acc > NIR] : 0.085           \n                                          \n                  Kappa : 0.3653          \n                                          \n Mcnemar's Test P-Value : 1.252e-05       \n                                          \n            Sensitivity : 0.9251          \n            Specificity : 0.4009          \n         Pos Pred Value : 0.8673          \n         Neg Pred Value : 0.5583          \n             Prevalence : 0.8089          \n         Detection Rate : 0.7483          \n   Detection Prevalence : 0.8628          \n      Balanced Accuracy : 0.6630          \n                                          \n       'Positive' Class : 0               \n                                          \n```\n:::\n\n```{.r .cell-code}\nboost.predictions <- as.numeric(boost.predictions)\npred_obj <- prediction(boost.predictions, test$good)\nauc_val <- performance(pred_obj, \"auc\")@y.values[[1]]\nauc_val\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.6629796\n```\n:::\n\n```{.r .cell-code}\nroc_obj <- performance(pred_obj, \"tpr\", \"fpr\")\nplot(roc_obj, colorize = TRUE, lwd = 2,\n     xlab = \"False Positive Rate\", \n     ylab = \"True Positive Rate\",\n     main = \"Boosting (10-fold CV)\")\nabline(a = 0, b = 1)\nx_values <- as.numeric(unlist(roc_obj@x.values))\ny_values <- as.numeric(unlist(roc_obj@y.values))\npolygon(x = x_values, y = y_values, \n        col = rgb(0.3803922, 0.6862745, 0.9372549, alpha = 0.3),\n        border = NA)\npolygon(x = c(0, 1, 1), y = c(0, 0, 1), \n        col = rgb(0.3803922, 0.6862745, 0.9372549, alpha = 0.3),\n        border = NA)\ntext(0.6, 0.4, paste(\"AUC =\", round(auc_val, 4)))\n```\n\n```{.r .cell-code}\nboost.kfoldCV.ROC.plot <- recordPlot()\n\npander::pander(boost_model$results)\n```\n\n::: {.cell-output-display}\n------------------------------------------------------------------------------\n &nbsp;   shrinkage   interaction.depth   n.minobsinnode   n.trees   Accuracy \n-------- ----------- ------------------- ---------------- --------- ----------\n **1**       0.1              1                 10           50        0.81   \n\n **4**       0.1              2                 10           50       0.8136  \n\n **7**       0.1              3                 10           50       0.8103  \n\n **2**       0.1              1                 10           100      0.8143  \n\n **5**       0.1              2                 10           100      0.8107  \n\n **8**       0.1              3                 10           100      0.8125  \n\n **3**       0.1              1                 10           150      0.814   \n\n **6**       0.1              2                 10           150      0.8147  \n\n **9**       0.1              3                 10           150      0.8114  \n------------------------------------------------------------------------------\n\nTable: Table continues below\n\n \n----------------------------------------\n &nbsp;   Kappa    AccuracySD   KappaSD \n-------- -------- ------------ ---------\n **1**    0.2759    0.01404     0.05789 \n\n **4**    0.3286    0.01312     0.03983 \n\n **7**    0.3374    0.02073     0.07382 \n\n **2**    0.3408    0.01961     0.0701  \n\n **5**    0.3427    0.01489     0.04562 \n\n **8**    0.3534    0.01818     0.06687 \n\n **3**    0.3457    0.02366     0.08334 \n\n **6**    0.3694    0.01629     0.06235 \n\n **9**    0.3559    0.02313     0.07864 \n----------------------------------------\n:::\n:::\n\n\n## SUmmary\n\n::: {.cell layout-align=\"TRUE\"}\n\n```{.r .cell-code}\ncowplot::plot_grid(boost.kfoldCV.ROC.plot)\n```\n\n::: {.cell-output-display}\n![](boosting_files/figure-html/unnamed-chunk-1-1.png){fig-align='TRUE' width=480}\n:::\n:::\n\n\n| Resampling Method    | Error Rate | Sensitivity | Specificity | AUC       |\n| -------------------- | ---------- | ----------- | ----------- | --------- |\n| Boost                | 0.1751     | 0.9251      | 0.4009      | 0.6629796 |\n\n\n::: {.cell layout-align=\"TRUE\"}\n\n:::",
    "supporting": [
      "boosting_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}